import{S as IE,i as DE,s as CE,k as p,q as a,a as c,l,m as r,r as n,h as t,c as u,n as m,b as i,D as s,E as Iy}from"./index.ce9a7868.js";function LE(b2){let b,Li,bs,Mi,Ri,Ke,Oi,Hi,$o,v,Wi,Qe,Ji,Fi,Ze,qi,Ni,et,Ui,Yi,Xo,se,Bi,tt,zi,Gi,Ko,vs,K,Vi,st,$i,Xi,at,Ki,Qi,Qo,Es,Zi,Zo,ae,ec,nt,tc,sc,ep,k,ac,ot,nc,oc,pt,pc,lc,lt,rc,ic,rt,cc,uc,tp,E,mc,Va,dc,fc,$a,kc,hc,Xa,yc,wc,sp,g,bc,Ka,vc,Ec,Qa,gc,_c,Za,Pc,Tc,ap,ne,xc,it,Sc,jc,np,gs,Ac,op,oe,Ic,ct,Dc,Cc,pp,_s,Lc,lp,ut,v2=`<code class="language-javascript"><span class="token comment">// webpack.config.js</span>
<span class="token operator">...</span>
<span class="token literal-property property">entry</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'src/index.ts'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token operator">...</span>
<span class="token literal-property property">resolve</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">extensions</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'.ts'</span><span class="token punctuation">,</span> <span class="token string">'.js'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token operator">...</span></code>`,rp,Ps,Mc,ip,mt,E2=`<code class="language-javascript"><span class="token comment">// webpack.config.js</span>
<span class="token punctuation">&#123;</span>
    <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">.ts?$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
    <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">&#123;</span> <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">'ts-loader'</span> <span class="token punctuation">&#125;</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span></code>`,cp,Ts,Rc,up,dt,g2=`<code class="language-javascript"><span class="token punctuation">&#123;</span>
  <span class="token string-property property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token string-property property">"sourceMap"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,mp,xs,Oc,dp,Ss,Hc,fp,ft,_2=`<code class="language-javascript"><span class="token comment">// webpack.config.js</span>
<span class="token punctuation">&#123;</span>
    <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">.html$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
    <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">&#123;</span> <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">'babel-loader'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#123;</span> <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">'ts-loader'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// &lt;--</span>
        <span class="token punctuation">&#123;</span> <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">'polymer-webpack-loader'</span> <span class="token punctuation">&#125;</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span></code>`,kp,js,Wc,hp,kt,P2=`<code class="language-undefined">ERROR in ./src/polygram-app.html
Module build failed: Error: Could not find file: &#39;/home/me/polygram/src/polygram-app.html&#39;.</code>`,yp,pe,Jc,ht,Fc,qc,wp,As,Nc,bp,Is,Uc,vp,le,Yc,en,Bc,zc,Ep,re,Gc,tn,Vc,$c,gp,yt,T2=`<code class="language-html">// imports
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>import<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../bower_components/polymer/polymer-element.html<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
...
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>import<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>polygram-details.html<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>import<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>polygram-searchbox.html<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dom-module</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>polygram-app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>
    <span class="token comment">&lt;!-- Style --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">include</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>iron-flex iron-flex-alignment<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>

    <span class="token comment">&lt;!-- Markup --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layout vertical<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    ...
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
    <span class="token comment">// Script</span>
    <span class="token keyword">import</span> format <span class="token keyword">from</span> <span class="token string">'date-fns/format'</span><span class="token punctuation">;</span>

    <span class="token keyword">class</span> <span class="token class-name">PolygramApp</span> <span class="token keyword">extends</span> <span class="token class-name">Polymer<span class="token punctuation">.</span>Element</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">static</span> <span class="token keyword">get</span> <span class="token function">is</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token string">'polygram-app'</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token keyword">static</span> <span class="token keyword">get</span> <span class="token function">properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
          <span class="token literal-property property">today</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
            <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>
            <span class="token function-variable function">value</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
              <span class="token keyword">return</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'MM/DD/YYYY'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
          <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    window<span class="token punctuation">.</span>customElements<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span>PolygramApp<span class="token punctuation">.</span>is<span class="token punctuation">,</span> PolygramApp<span class="token punctuation">)</span><span class="token punctuation">;</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dom-module</span><span class="token punctuation">></span></span></code>`,_p,ie,Xc,sn,Kc,Qc,Pp,wt,x2=`<code class="language-typescript"><span class="token comment">// PolygramApp.ts</span>
<span class="token keyword">import</span> format <span class="token keyword">from</span> <span class="token string">'date-fns/format'</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">PolygramApp</span> <span class="token keyword">extends</span> <span class="token class-name">Polymer</span><span class="token punctuation">.</span>Element <span class="token punctuation">&#123;</span>
  <span class="token keyword">static</span> <span class="token keyword">get</span> <span class="token keyword">is</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token string">'polygram-app'</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">static</span> <span class="token keyword">get</span> <span class="token function">properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
      today<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        type<span class="token operator">:</span> String<span class="token punctuation">,</span>
        <span class="token function-variable function">value</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          <span class="token keyword">return</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'MM/DD/YYYY'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,Tp,ce,Zc,an,eu,tu,xp,bt,S2=`<code class="language-html"><span class="token comment">&lt;!-- polygram-app.html --></span>
...

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dom-module</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>polygram-app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  ...
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
    <span class="token comment">// Script</span>
    <span class="token keyword">import</span> PolygramApp <span class="token keyword">from</span> <span class="token string">'./polygramApp'</span><span class="token punctuation">;</span>
    window<span class="token punctuation">.</span>customElements<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span>PolygramApp<span class="token punctuation">.</span>is<span class="token punctuation">,</span> PolygramApp<span class="token punctuation">)</span><span class="token punctuation">;</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dom-module</span><span class="token punctuation">></span></span></code>`,Sp,Ds,su,jp,Cs,au,Ap,_,nu,nn,ou,pu,on,lu,ru,pn,iu,cu,Ip,ue,uu,ln,mu,du,Dp,Ls,fu,Cp,d,rn,ku,hu,cn,yu,wu,un,bu,vu,mn,Eu,gu,dn,_u,Pu,fn,Tu,xu,Lp,R,Su,kn,ju,Au,hn,Iu,Du,Mp,Ms,Cu,Rp,Rs,Lu,Op,vt,j2=`<code class="language-html"><span class="token comment">&lt;!-- polygram-app.html --></span>
...

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dom-module</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>polygram-app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  ...
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
    <span class="token comment">// Script</span>
    <span class="token keyword">import</span> PolygramApp <span class="token keyword">from</span> <span class="token string">'./polygramApp'</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>PolygramApp<span class="token punctuation">.</span>properties<span class="token punctuation">.</span>today<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dom-module</span><span class="token punctuation">></span></span></code>`,Hp,me,Mu,yn,Ru,Ou,Wp,de,Os,Hu,wn,Wu,Ju,Hs,Fu,bn,qu,Jp,fe,Nu,vn,Uu,Yu,Fp,Ws,Bu,qp,Et,A2=`<code class="language-javascript"><span class="token keyword">import</span> format <span class="token keyword">from</span> <span class="token string">'date-fns/format'</span><span class="token punctuation">;</span></code>`,Np,Js,zu,Up,gt,I2=`<code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> format <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'date-fns'</span><span class="token punctuation">;</span></code>`,Yp,ke,Gu,En,Vu,$u,Bp,Fs,Xu,zp,qs,Ku,Gp,he,Qu,gn,Zu,em,Vp,Ns,tm,$p,_t,D2=`<code class="language-html"><span class="token comment">&lt;!-- polygram-app.html --></span>
...

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dom-module</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>polygram-app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  ...
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
    <span class="token comment">// Script</span>
    <span class="token keyword">import</span> PolygramAppFactory <span class="token keyword">from</span> <span class="token string">'./PolygramApp'</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> PolygramApp <span class="token operator">=</span> PolygramAppFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>Polymer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    window<span class="token punctuation">.</span>customElements<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span>PolygramApp<span class="token punctuation">.</span>is<span class="token punctuation">,</span> PolygramApp<span class="token punctuation">)</span><span class="token punctuation">;</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dom-module</span><span class="token punctuation">></span></span></code>`,Xp,Pt,C2=`<code class="language-typescript"><span class="token comment">// PolygramApp.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> format <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'date-fns'</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> label<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">'Current Date: '</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">create</span><span class="token punctuation">(</span>Polymer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token keyword">class</span> <span class="token class-name">PolygramApp</span> <span class="token keyword">extends</span> <span class="token class-name">Polymer</span><span class="token punctuation">.</span>Element <span class="token punctuation">&#123;</span>
    <span class="token keyword">static</span> <span class="token keyword">get</span> <span class="token keyword">is</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token string">'polygram-app'</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">static</span> <span class="token keyword">get</span> <span class="token function">properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
        today<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
          type<span class="token operator">:</span> String<span class="token punctuation">,</span>
          <span class="token function-variable function">value</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> label <span class="token operator">+</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'YYYY-MM-DD'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span> create <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code>`,Kp,Us,sm,Qp,O,am,_n,nm,om,Pn,pm,lm,Zp,Ys,rm,el,P,im,Tn,cm,um,xn,mm,dm,Sn,fm,km,tl,ye,hm,jn,ym,wm,sl,Tt,L2=`<code class="language-typescript"><span class="token comment">// ReduxMixin.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span>combineReducers<span class="token punctuation">,</span> compose<span class="token punctuation">,</span> createStore<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'redux'</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> PolymerRedux <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">'exports-loader?PolymerRedux!./PolymerRedux'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">...</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> ReduxMixin <span class="token operator">=</span> <span class="token function">PolymerRedux</span><span class="token punctuation">(</span>reduxStore<span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,al,Bs,bm,nl,xt,M2=`<code class="language-typescript"><span class="token comment">// PolygramApp.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> format <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'date-fns'</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> label<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">'Current Date: '</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span>ReduxMixin<span class="token punctuation">,</span> reduxStore<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./ReduxMixin'</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">create</span><span class="token punctuation">(</span>Polymer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">class</span> <span class="token class-name">PolygramApp</span> <span class="token keyword">extends</span> <span class="token class-name">ReduxMixin</span><span class="token punctuation">(</span>Polymer<span class="token punctuation">.</span>Element<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">static</span> <span class="token keyword">get</span> <span class="token keyword">is</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token string">'polygram-app'</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

        <span class="token keyword">static</span> <span class="token keyword">get</span> <span class="token function">properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// Added Redux code here</span>
            <span class="token operator">...</span>
        <span class="token punctuation">&#125;</span>

        <span class="token function">ready</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// Added Redux code here</span>
            <span class="token operator">...</span>
        <span class="token punctuation">&#125;</span>

    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span> create <span class="token punctuation">&#125;</span></code>`,ol,zs,vm,pl,Gs,Em,ll,we,gm,An,_m,Pm,rl,Vs,Tm,il,St,R2=`<code class="language-typescript"><span class="token keyword">const</span> PolymerRedux <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">'exports-loader?PolymerRedux!./PolymerRedux'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,cl,be,xm,In,Sm,jm,ul,jt,O2=`<code class="language-typescript"><span class="token keyword">const</span> PolymerRedux <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">'exports-loader?PolymerRedux!polymer-webpack-loader!../../bower_components/polymer-redux/dist/polymer-redux.html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,ml,ve,Am,At,Im,Dm,dl,It,H2=`<code class="language-typescript"><span class="token keyword">const</span> PolymerRedux <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">'exports-loader?PolymerRedux!polymer-webpack-loader!debug-loader?id=raw!../../bower_components/polymer-redux/dist/polymer-redux.html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,fl,T,Cm,Dn,Lm,Mm,Cn,Rm,Om,Ln,Hm,Wm,kl,$s,Jm,hl,Dt,W2=`<code class="language-typescript"><span class="token keyword">const</span> PolymerRedux <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">'exports-loader?PolymerRedux!../../bower_components/polymer-redux/dist/polymer-redux.html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,yl,Xs,Fm,wl,H,qm,Ct,Nm,Um,Lt,Ym,Bm,bl,Ks,zm,vl,Mt,J2=`<code class="language-javascript"><span class="token comment">// webpack.config.js</span>
<span class="token keyword">new</span> <span class="token class-name">TSLintPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  <span class="token literal-property property">files</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'./src/**/*.ts'</span><span class="token punctuation">]</span> <span class="token comment">// So, this requires none of the TS to be inline in HTML?</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,El,Qs,Gm,gl,Rt,Vm,Mn,$m,_l,Ee,Xm,Rn,Km,Qm,Pl,Zs,Zm,Tl,W,ed,Ot,td,sd,On,ad,nd,xl,Ht,F2=`<code class="language-typescript"><span class="token decorator"><span class="token at operator">@</span><span class="token function">ReduxMixin</span></span>
<span class="token keyword">class</span> <span class="token class-name">MyElement</span> <span class="token keyword">extends</span> <span class="token class-name">Polymer</span><span class="token punctuation">.</span>Element
<span class="token operator">...</span></code>`,Sl,ge,od,Wt,pd,ld,jl,Jt,q2=`<code class="language-typescript">    @<span class="token keyword">readonly</span>
    <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// This works, but prepends a polyfill to the output</span>
        <span class="token keyword">return</span> <span class="token string">'just testing a decorator'</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span></code>`,Al,ea,rd,Il,Ft,N2=`<code class="language-typescript"><span class="token keyword">function</span> <span class="token keyword">readonly</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> descriptor<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  descriptor<span class="token punctuation">.</span>writable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> descriptor<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,Dl,ta,id,Cl,qt,U2='<code class="language-undefined">error TS1219: Experimental support for decorators is a feature that is subject to change in a future release. Set the &#39;experimentalDecorators&#39; option to remove this warning.</code>',Ll,J,cd,Hn,ud,md,Wn,dd,fd,Ml,sa,kd,Rl,aa,hd,Ol,_e,yd,Nt,wd,bd,Hl,Pe,vd,Jn,Ed,gd,Wl,F,_d,Fn,Pd,Td,qn,xd,Sd,Jl,Te,na,jd,Nn,Ad,Id,Un,Dd,Fl,oa,Cd,ql,xe,Ld,Yn,Md,Rd,Nl,q,Q,Od,Bn,Hd,Wd,zn,Jd,Fd,qd,Ut,Nd,Gn,Ud,Yd,Bd,Z,zd,Vn,Gd,Vd,$n,$d,Xd,Ul,pa,Kd,Yl,Se,N,Qd,Xn,Zd,ef,Kn,tf,sf,Qn,af,nf,L,of,Zn,pf,lf,eo,rf,cf,to,uf,mf,Bl,la,df,zl,Yt,Y2=`<code class="language-undefined">polygram-details.ts(8,31): error TS2304: Cannot find name &#39;Polymer&#39;.
polygram-details.ts(33,14): error TS2339: Property &#39;_searchResult&#39; does not exist on type &#39;PolygramDetails&#39;.
polygram-details.ts(35,18): error TS2339: Property &#39;_searchIAUrl&#39; does not exist on type &#39;PolygramDetails&#39;.
polygram-details.ts(42,18): error TS2339: Property &#39;_searchResult&#39; does not exist on type &#39;PolygramDetails&#39;.</code>`,Gl,U,ff,so,kf,hf,ao,yf,wf,Vl,ra,bf,$l,Bt,B2=`<code class="language-undefined">polygram-details.ts(9,16): error TS1056: Accessors are only available when targeting ECMAScript 5 and higher.
polygram-details.ts(13,16): error TS1056: Accessors are only available when targeting ECMAScript 5 and higher.</code>`,Xl,Y,vf,no,Ef,gf,oo,_f,Pf,Kl,ia,Tf,Ql,ca,xf,Zl,ua,Sf,er,ma,jf,tr,da,Af,sr,fa,If,ar,ka,Df,nr,ha,Cf,or,ya,Lf,pr,wa,Mf,lr,f,Rf,po,Of,Hf,lo,Wf,Jf,ro,Ff,qf,io,Nf,Uf,co,Yf,Bf,rr,zt,uo,zf,Gf,ir,je,Vf,Gt,$f,Xf,cr,ba,Kf,ur,B,Qf,mo,Zf,ek,fo,tk,sk,mr,va,ak,dr,Ae,nk,ko,ok,pk,fr,Vt,z2=`<code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"sourceMap"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">"target"</span><span class="token operator">:</span> <span class="token string">"ES6"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token property">"include"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"*.ts"</span><span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span></code>`,kr,z,lk,ho,rk,ik,yo,ck,uk,hr,h,mk,wo,dk,fk,bo,kk,hk,vo,yk,wk,Eo,bk,vk,yr,Ea,Ek,wr,ga,gk,br,Ie,_k,$t,Pk,Tk,vr,_a,xk,Er,Xt,G2=`<code class="language-json"><span class="token comment">// base.json</span>
<span class="token punctuation">&#123;</span>
  <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"sourceMap"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">"target"</span><span class="token operator">:</span> <span class="token string">"ESNext"</span><span class="token punctuation">,</span>
    <span class="token property">"moduleResolution"</span><span class="token operator">:</span> <span class="token string">"node"</span><span class="token punctuation">,</span>
    <span class="token property">"experimentalDecorators"</span><span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,gr,Pa,Sk,_r,Kt,V2=`<code class="language-json"><span class="token comment">// polygram-details.tsconfig.json</span>
<span class="token punctuation">&#123;</span>
  <span class="token property">"extends"</span><span class="token operator">:</span> <span class="token string">"./base.json"</span><span class="token punctuation">,</span>
  <span class="token property">"files"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"./polygram-details.ts"</span><span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span></code>`,Pr,G,jk,go,Ak,Ik,_o,Dk,Ck,Tr,y,Lk,Po,Mk,Rk,To,Ok,Hk,xo,Wk,Jk,So,Fk,qk,xr,x,Nk,Qt,Uk,Yk,Zt,Bk,zk,es,Gk,Vk,Sr,ts,$2=`<code class="language-javascript"><span class="token comment">// ts-poly-watch.js, run with: node ts-poly-watch.js</span>
<span class="token keyword">const</span> watch <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'watch'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> chalk <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'chalk'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> tsc <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'node-typescript-compiler'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

watch<span class="token punctuation">.</span><span class="token function">createMonitor</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">interval</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">monitor</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>chalk<span class="token punctuation">.</span>gray<span class="token punctuation">.</span>bgGreen<span class="token punctuation">.</span><span class="token function">bold</span><span class="token punctuation">(</span><span class="token string">'TS-POLY-WATCH started'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  monitor<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'changed'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">f<span class="token punctuation">,</span> curr<span class="token punctuation">,</span> prev</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> ext <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">extname</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ext <span class="token operator">===</span> <span class="token string">'.ts'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f <span class="token operator">+</span> <span class="token string">' changed'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      tsc<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>
        <span class="token punctuation">&#123;</span>
          <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">'ES6'</span><span class="token punctuation">,</span>
          <span class="token literal-property property">sourceMap</span><span class="token operator">:</span> <span class="token boolean">true</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        f
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,jr,Ta,$k,Ar,xa,Xk,Ir,S,Kk,jo,Qk,Zk,ss,eh,th,as,sh,ah,Dr,j,nh,ns,oh,ph,Ao,lh,rh,Io,ih,ch,Cr,De,os,uh,Do,mh,dh,fh,ee,kh,ps,hh,yh,ls,wh,bh,Lr,Sa,vh,Mr,Ce,rs,Eh,Co,gh,_h,Ph,Lo,Th,Rr,is,X2=`<code class="language-typescript"><span class="token comment">// polygram-twc.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> CustomElement <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'twc/polymer'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string">'bower:polymer/polymer-element.html'</span><span class="token punctuation">;</span>

<span class="token comment">/**
 * &#96;online-state&#96;
 * Lets you select an online state (online or offline) and reflect the change on a host attribute.
 *
 * @customElement
 * @polymer
 * @demo demo/index.html
 */</span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">CustomElement</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">OnlineState</span> <span class="token keyword">extends</span> <span class="token class-name">Polymer</span><span class="token punctuation">.</span>Element <span class="token punctuation">&#123;</span>
  prop1<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">'online-state'</span><span class="token punctuation">;</span>

  <span class="token function">template</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">
          &lt;style>
            :host &#123;
              display: block;
            &#125;
          &lt;/style>
          &lt;h2>Hello [[prop1]]!&lt;/h2>
        </span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,Or,A,M,xh,Mo,Sh,jh,Ro,Ah,Ih,Oo,Dh,Ch,Lh,cs,Mh,Ho,Rh,Oh,Hh,us,Wh,Wo,Jh,Fh,qh,Jo,Nh,Hr,Le,Uh,ms,Yh,Bh,Wr,I,ja,zh,Fo,Gh,Vh,ds,qo,$h,Xh,No,Kh,Qh,te,Zh,Uo,ey,ty,Yo,sy,ay,ny,Bo,oy,Jr,Me,py,fs,ly,ry,Fr,ks,K2=`<code class="language-typescript"><span class="token comment">// PolymerElement is its own module now, instead of a property of the Polymer namespace. Also, bower is no longer used.</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Element <span class="token keyword">as</span> PolymerElement <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@polymer/polymer/polymer-element'</span><span class="token punctuation">;</span>

<span class="token comment">// Aside from inline templates, this syntax can be used too:</span>
<span class="token comment">//import * as view from './app.template.html';</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">OnlineState</span> <span class="token keyword">extends</span> <span class="token class-name">PolymerElement</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Property must be defined in the constructor, but this might be a difference with TypeScript and not Polymer 3.</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>prop1 <span class="token operator">=</span> <span class="token string">'online-state'</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">static</span> <span class="token keyword">get</span> <span class="token function">template</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// I don't know where the &lt;style> element should go.</span>
    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">&lt;h2>Hello [[prop1]]!&lt;/h2></span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">;</span>
    <span class="token comment">// Or when using an import:</span>
    <span class="token comment">//return view;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,qr,Aa,iy,Nr,Ia,cy,Ur,Re,uy,hs,my,dy,Yr,D,fy,zo,ky,hy,Go,yy,wy,Vo,by,vy,Br,Oe,Ey,ys,gy,_y;return{c(){b=p("p"),Li=a("For "),bs=p("a"),Mi=a("reasons beyond my control"),Ri=a(` I’m working with
Polymer 2 at the moment. Although the idea of web components is great, the choice for HTML imports that comes with
Polymer 2 makes integration into a modern development stack cumbersome, as will become clear soon. Also, HTML
imports are not widely supported by browsers and although polyfills exist, only `),Ke=p("a"),Oi=a("Chrome (surprise!)"),Hi=a(`
will have native support for the foreseeable future.`),$o=c(),v=p("p"),Wi=a(`Using TypeScript seems like a good choice, because static typing helps prevent runtime errors. Additionally it would be a
good opportunity to try out the `),Qe=p("a"),Ji=a("Scala-TS-interfaces project"),Fi=a(` by my
colleagues, that can generate TypeScript from a Scala domain model. Unfortunately, adding TypeScript to a Polymer 2
development stack proves to be difficult, whereas using it with Polymer 3 seems trivial. Polymer 3 is currently in
preview so it is not a viable option for me for the moment, but it will exchange HTML imports for ES6 Modules. This will
make integrating it into a modern development stack much easier. An `),Ze=p("a"),qi=a("example"),Ni=a(`
already exists, by `),et=p("a"),Ui=a("Paolo Ferretti"),Yi=a(" and follows normal conventions for a TypeScript project."),Xo=c(),se=p("p"),Bi=a("If you’re adventurous, don’t need any "),tt=p("a"),zi=a("existing Polymer 2 elements"),Gi=a(` and don’t need to
run production; stop reading here and use Polymer 3.
If you need Polymer 2 read on, but be warned that it won’t be pretty.`),Ko=c(),vs=p("p"),K=p("strong"),Vi=a("TL;DR to use TypeScript with Polymer 2 use "),st=p("a"),$i=a("typescript-batch-compiler"),Xi=a(" or even better "),at=p("a"),Ki=a("twc"),Qi=a("."),Qo=c(),Es=p("h2"),Zi=a("Webpack"),Zo=c(),ae=p("p"),ec=a("For this experiment I will use my existing Polygram project and the result will be available in the "),nt=p("a"),tc=a("TypeScript branch"),sc=a("."),ep=c(),k=p("p"),ac=a(`The first challenge is to use Webpack with Polymer 2. Although not strictly necessary for TypeScript compilation, it would
make sense for importing HTML as modules. Fortunately, `),ot=p("a"),nc=a("Rob Dodson himself"),oc=a(` wrote an
article `),pt=p("a"),pc=a("How to use Polymer with Webpack"),lc=a(`. It even mentions TypeScript!
The article introduces the Webpack loader `),lt=p("a"),rc=a("https://github.com/webpack-contrib/polymer-webpack-loader"),ic=a(` and
explains how it extracts the JavaScript from the HTML of Polymer elements and eventually packages everything into one
JavaScript file. I was basically able to copy the webpack.config.js and index.ejs from his demo project, place it into Polygram and that would compile. I moved my
`),rt=p("a"),cc=a("custom elements"),uc=a(` from the root of the project to the src dir and I had
to modify the paths to the bower_components and it would basically work.`),tp=c(),E=p("p"),mc=a(`The most important exception is Redux, the redux-mixin.html can’t resolve the PolymerRedux.html dependency (in bower_components/polymer-redux/polymer-redux.html).
The polymer-webpack-loader should resolve this, but runtime it logs `),Va=p("code"),dc=a("Uncaught ReferenceError: PolymerRedux is not defined"),fc=a(`.
E.g. for src/polygram-app.html, the loader seems to import the HTML elements that are used in the `),$a=p("code"),kc=a("template"),hc=a(` element,
but not the JavaScript variables that are used in the `),Xa=p("code"),yc=a("script"),wc=a(" element."),sp=c(),g=p("p"),bc=a("The PolymerRedux code is distributed as JavaScript wrapped in a "),Ka=p("code"),vc=a("script"),Ec=a(` tag in mainly one file, so it would be easy to
extract it to a JavaScript file. Or even to import `),Qa=p("code"),gc=a("polymer-redux/src/index.js"),_c=a(" instead of "),Za=p("code"),Pc=a("polymer-redux/polymer-redux.html"),Tc=a(`
(although index.js is uncompiled and misses external dependencies that are not installed in bower_components because they are development dependencies of polymer-redux).
For now, I just comment out the Redux dependencies.`),ap=c(),ne=p("p"),xc=a(`It is already clear now that the result from Webpack will be one huge bundle.js that inlines all JavaScript and HTML
dependencies. This means using the `),it=p("a"),Sc=a("PRPL pattern"),jc=a(` will not be possible
in this workflow, nor will it be possible to have standalone Polymer components and the accompanying Polymer demo pages.`),np=c(),gs=p("h2"),Ac=a("Adding ts-loader"),op=c(),oe=p("p"),Ic=a("Normally, to migrate a Webpack project from JavaScript to TypeScript, it would be enough to add the "),ct=p("a"),Dc=a("ts-loader"),Cc=a(`
to the Webpack config and to rename the JavaScript files to TypeScript files.`),pp=c(),_s=p("p"),Lc=a("So I started with changing the extension for the bootstrapping index.js and adding .ts as a resolved extension:"),lp=c(),ut=p("pre"),rp=c(),Ps=p("p"),Mc=a("And adding this rule:"),ip=c(),mt=p("pre"),cp=c(),Ts=p("p"),Rc=a("And creating a tsconfig.json:"),up=c(),dt=p("pre"),mp=c(),xs=p("p"),Oc=a(`Everything still compiles, but the JavaScript for the Polymer components is embedded in the HTML and therefore ignored
by the new rule with the ts-loader.`),dp=c(),Ss=p("p"),Hc=a("Adding the ts-loader to the rule for the HTML files breaks compilation:"),fp=c(),ft=p("pre"),kp=c(),js=p("p"),Wc=a("Even without changing any of the code itself, compilation fails with:"),hp=c(),kt=p("pre"),yp=c(),pe=p("p"),Jc=a("Well, that just doesn’t look healthy. I filed "),ht=p("a"),Fc=a("a bug"),qc=a(`
and almost 2 months after my report the maintainers closed the issue commenting that the root cause is with Webpack, so I
don’t see this will be resolved any time soon.`),wp=c(),As=p("p"),Nc=a("For now, I will try to work around it by extracting the TypeScript code to a separate file."),bp=c(),Is=p("h3"),Uc=a("Workaround for TypeScript compilation in a Polymer element"),vp=c(),le=p("p"),Yc=a("After removing the "),en=p("code"),Bc=a("ts-loader"),zc=a(` line from the HTML rule in the webpack.config.js I set out to extract the TypeScript to a
separate file so it can be compiled with the rule that matches ts files.`),Ep=c(),re=p("p"),Gc=a("Roughly, the main entry point for the Polymer elements "),tn=p("code"),Vc=a("polygram-app.html"),$c=a(" contains:"),gp=c(),yt=p("pre"),_p=c(),ie=p("p"),Xc=a("Since I know the "),sn=p("code"),Kc=a("import"),Qc=a(` statement in the script tag works, I can use this to my advantage. Lets create a companion
TypeScript file for polygram-app.html named PolygramApp.ts.`),Pp=c(),wt=p("pre"),Tp=c(),ce=p("p"),Zc=a("It would be possible to import PolygramApp.ts with "),an=p("code"),eu=a('<script src="PolygramApp.ts"><\/script'),tu=a(`, but I like the standard ES6 module structure
of PolygramApp.ts without the added responsibility of registering itself to customElements, so I import it like this:`),xp=c(),bt=p("pre"),Sp=c(),Ds=p("p"),su=a("The result is a failed compilation with 3 types of errors. Let’s deal with them one by one."),jp=c(),Cs=p("h3"),au=a("1. Failing accessors"),Ap=c(),_=p("p"),nu=a("The "),nn=p("code"),ou=a("is"),pu=a(" and "),on=p("code"),lu=a("properties"),ru=a(` getters require a specifically set target ECMAScript version, the compilation error is:
`),pn=p("code"),iu=a("error TS1056: Accessors are only available when targeting ECMAScript 5 and higher"),cu=a(`. It surprises me that the default
ES target is ES3, but it’s not a problem to use ES5 or even ESNext here, because the babel-loader will transpile it back to ES5.`),Ip=c(),ue=p("p"),uu=a("Adding "),ln=p("code"),mu=a('"target": "ESNext"'),du=a(" to compilerOptions in the tsconfig.json fixes this error."),Dp=c(),Ls=p("h3"),fu=a("2. Failing Polymer import"),Cp=c(),d=p("p"),rn=p("code"),ku=a("Polymer"),hu=a(" can’t be found for the "),cn=p("code"),yu=a("extends"),wu=a(`. This is the most difficult of these errors to solve, because it is caused by the preferred module
architecture of Polymer 2: because HTML imports are used, it is not possible to use `),un=p("code"),bu=a("import Polymer from '../bower_components/polymer/polymer-element.html'"),vu=a(`
because this polymer-element does not export `),mn=p("code"),Eu=a("Polymer"),gu=a(` as an ES6 module. The webpack-polymer-loader can resolve HTML
imports, but using `),dn=p("code"),_u=a("import '../bower_components/polymer/polymer-element.html'"),Pu=a(" results in an "),fn=p("code"),Tu=a("error TS2304: Cannot find name 'Polymer'"),xu=a("."),Lp=c(),R=p("p"),Su=a("For the moment, I’m just removing the "),kn=p("code"),ju=a("extends Polymer.Element"),Au=a(" from PolygramApps.ts and "),hn=p("code"),Iu=a("window.customElements.define(PolygramApp.is, PolygramApp);"),Du=a(" from polygram-app.html."),Mp=c(),Ms=p("h3"),Cu=a("3. Failing date-fns import"),Rp=c(),Rs=p("p"),Lu=a("To be able to continue resolving the compilation errors, I add a log statement to polygram-app.html:"),Op=c(),vt=p("pre"),Hp=c(),me=p("p"),Mu=a(`The import of date-fns originally failed in the TypeScript compilation with
`),yn=p("code"),Ru=a("error TS1192: Module ''date-fns/format'' has no default export."),Ou=a(" but at this point that has two different behaviors:"),Wp=c(),de=p("ul"),Os=p("li"),Hu=a("The IDE warns "),wn=p("code"),Wu=a("TS2307 Cannot find module date-fns"),Ju=c(),Hs=p("li"),Fu=a("Compilation succeeds, but this error is logged in the browser: "),bn=p("code"),qu=a("Uncaught TypeError: format_1.default is not a function(…)"),Jp=c(),fe=p("p"),Nu=a(`I first thought that this was caused by missing typings for the date-fns library, so I tried
`),vn=p("code"),Uu=a("npm install @types/date-fns"),Yu=a(" but this logs that date-fns actually provides typings."),Fp=c(),Ws=p("p"),Bu=a("Eventually I was able to fix the Uncaught TypeError by changing the import in PolygramApp.ts from"),qp=c(),Et=p("pre"),Np=c(),Js=p("p"),zu=a("to"),Up=c(),gt=p("pre"),Yp=c(),ke=p("p"),Gu=a("And the IDE warning by adding "),En=p("code"),Vu=a('"moduleResolution": "node"'),$u=a(" to the compilerOptions in tsconfig.json."),Bp=c(),Fs=p("p"),Xu=a("At this point, although nothing is rendered, because of the added log statement the current date is logged to the browser console."),zp=c(),qs=p("h3"),Ku=a("Failing Polymer import, continued"),Gp=c(),he=p("p"),Qu=a(`Now the import succeeds and it is clear that the TypeScript compiler correctly processes PolygramApp.ts, it is time to
try to fix the import of the `),gn=p("code"),Zu=a("Polymer"),em=a(" module in PolygramApp.ts."),Vp=c(),Ns=p("p"),tm=a(`A possible workaround will be to not try to import HTML imports in the TypeScript file, but instead to supply those dependencies
through the HTML that is importing the TypeScript file. To do this, I change the respective files to:`),$p=c(),_t=p("pre"),Xp=c(),Pt=p("pre"),Kp=c(),Us=p("p"),sm=a("Now everything compiles without errors and the custom elements are rendered again!"),Qp=c(),O=p("p"),am=a("Note here that I also added a "),_n=p("code"),nm=a("string"),om=a(" type to "),Pn=p("code"),pm=a("const label"),lm=a(" to see if typings work."),Zp=c(),Ys=p("h3"),rm=a("Re-enabling Redux"),el=c(),P=p("p"),im=a("Earlier, Redux was disabled to test Webpack. It was failing with the runtime error "),Tn=p("code"),cm=a("Uncaught ReferenceError: PolymerRedux is not defined"),um=a(" To re-enable it, I convert the "),xn=p("code"),mm=a("polymer-redux/polymer-redux.html"),dm=a(` from
bower_components to a local PolymerRedux.js, by just removing the `),Sn=p("code"),fm=a("script"),km=a(" tags."),tl=c(),ye=p("p"),hm=a("Because redux-mixin.html, action.html, and reducer.html actually are already JavaScript wrapped in "),jn=p("code"),ym=a("script"),wm=a(` tags, I just convert
them to TypeScript files, for example:`),sl=c(),Tt=p("pre"),al=c(),Bs=p("p"),bm=a("To use it in PolygramApp.ts, it can now be imported like a normal ES6 module:"),nl=c(),xt=p("pre"),ol=c(),zs=p("p"),vm=a("After making similar modifications for polygram-searchbox, the Redux events work again as before introducing TypeScript."),pl=c(),Gs=p("h2"),Em=a("Importing a global variable from HTML"),ll=c(),we=p("p"),gm=a("At this point PolymerRedux is loaded from a custom PolymerRedux.js that I made in the previous step by removing the "),An=p("code"),_m=a("<script>"),Pm=a(`
tags from the file in bower_components. Although this works, it would be better to use the file in bower_components
directly because it will be easier to handle updates to this external package.`),rl=c(),Vs=p("p"),Tm=a("Currently I import the custom PolymerRedux.js in state/ReduxMixin.ts with:"),il=c(),St=p("pre"),cl=c(),be=p("p"),xm=a(`To load the HTML from the bower_components, I expect to have to use the polymer-webpack-loader to extract the JavaScript
from the `),In=p("code"),Sm=a("script"),jm=a(" tags:"),ul=c(),jt=p("pre"),ml=c(),ve=p("p"),Am=a("This fails to compile with the message that PolymerRedux is undefined, so I add the "),At=p("a"),Im=a("debug-loader"),Dm=a(` to
investigate what the result of each step looks like:`),dl=c(),It=p("pre"),fl=c(),T=p("p"),Cm=a("Thanks to debug-loader it is immediately clear that already before going into the polymer-webpack-loader the "),Dn=p("code"),Lm=a("script"),Mm=a(` tags have
been stripped. Just using require without any loaders turns something likes this `),Cn=p("code"),Rm=a("<script>foo()<\/script>"),Om=a(" into "),Ln=p("code"),Hm=a("foo()"),Wm=a(`
and webpack-polymer-loader is not needed in this case. I do think this only works when the file is completely self
contained and does not have dependencies with other Polymer HTML files.`),kl=c(),$s=p("p"),Jm=a("This is the final working import:"),hl=c(),Dt=p("pre"),yl=c(),Xs=p("h2"),Fm=a("Linting"),wl=c(),H=p("p"),qm=a("Although there is a "),Ct=p("a"),Nm=a("polymer-linter"),Um=a(", it is "),Lt=p("a"),Ym=a("advised"),Bm=a(` to
use Polymer Linter combined with other linters, and an obvious choice is TSLint.`),bl=c(),Ks=p("p"),zm=a("The way that TSLint is configured with Webpack means that it will only lint TypeScript that is not embedded in HTML:"),vl=c(),Mt=p("pre"),El=c(),Qs=p("p"),Gm=a(`Before I started with this experiment I thought this might be a problem. But now almost all script has been extracted to
separate TypeScript files anyway, so this works quite well.`),gl=c(),Rt=p("p"),Vm=a("Of course it is also still possible to run TSLint manually for a file, e.g. "),Mn=p("code"),$m=a("./node_modules/.bin/tslint --config tslint.json polygram-marvel-details.ts"),_l=c(),Ee=p("p"),Xm=a("It is still required to run "),Rn=p("code"),Km=a("polymer lint"),Qm=a(" manually. As far as I know there is no integration for Webpack yet."),Pl=c(),Zs=p("h2"),Zm=a("Decorators"),Tl=c(),W=p("p"),ed=a("I want to see if I can use "),Ot=p("a"),td=a("ES decorators"),sd=a(`,
because decorators conceptually fit with the Mixin pattern used in Polymer
for e.g. `),On=p("code"),ad=a("class MyElement extends ReduxMixin(Polymer.Element)"),nd=a(`. It would be tidy if we could write this as a decorator,
especially if more mixins would need to be combined:`),xl=c(),Ht=p("pre"),Sl=c(),ge=p("p"),od=a("As a test, I just add an "),Wt=p("a"),pd=a("example decorator"),ld=a(`
to the class in polygram-details.ts:`),jl=c(),Jt=p("pre"),Al=c(),ea=p("p"),rd=a("And in the same file, but outside the class, the definition of the decorator:"),Il=c(),Ft=p("pre"),Dl=c(),ta=p("p"),id=a("The compiler fails with:"),Cl=c(),qt=p("pre"),Ll=c(),J=p("p"),cd=a("This flag can be added to the compilerOptions section of the tsconfig.json: "),Hn=p("code"),ud=a("'experimentalDecorators': true"),md=a(`. The
compilation now succeeds, but prepends a small polyfill for `),Wn=p("code"),dd=a("decorator"),fd=a(` to the output. Take this into account when using
decorator in many files, because it will cause an overhead that might be avoided by using a third party library that is
imported globally.`),Ml=c(),sa=p("h2"),kd=a("App vs Element"),Rl=c(),aa=p("p"),hd=a("It is one thing to compile Typescript for a Polymer app, but another thing to use TypeScript for reusable Polymer components."),Ol=c(),_e=p("p"),yd=a(`The next step will be to compile the Polymer components in this test project separately. As a result, each converted
component should both be loaded into its own `),Nt=p("a"),wd=a("demo page"),bd=a(" and to be composed into a Polymer app."),Hl=c(),Pe=p("p"),vd=a("The demo pages should be accessible by running "),Jn=p("code"),Ed=a("polymer serve"),gd=a(", conform the normal Polymer workflow."),Wl=c(),F=p("p"),_d=a("When just running a Webpack build for the current project with "),Fn=p("code"),Pd=a("./node_modules/.bin/webpack --config webpack.config.js"),Td=a(`, it will build a
`),qn=p("code"),xd=a("dist"),Sd=a(` dir containing amongst others an index.html and a bundle.js. This is a standalone app, but this would not be a good workflow to
distribute a Polymer component because:`),Jl=c(),Te=p("ul"),na=p("li"),jd=a("the index.html is a complete HTML document, not just a "),Nn=p("code"),Ad=a("dom-module"),Id=c(),Un=p("li"),Dd=a("the bundle.js is one huge JavaScript blob that contains not only the compiled JavaScript for the component, but also all templates, TypeScript, Webpack and Polymer polyfills and libraries (like lodash in this case)"),Fl=c(),oa=p("p"),Cd=a(`The polyfills and libraries need to be kept separate, so that they can be loaded once per project instead of once for every component.
The bundle.js is already 2.8MB in size (unminified) / 347kB (minified).`),ql=c(),xe=p("p"),Ld=a("Would it be possible to make a Polymer component that uses the "),Yn=p("code"),Md=a('<script src="foo.js">'),Rd=a(` style import and then do a “naive”
compilation from foo.ts to foo.js? Let’s first make a minimal example where the JavaScript is extracted from an Polymer
component:`),Nl=c(),q=p("ul"),Q=p("li"),Od=a("Using "),Bn=p("code"),Hd=a("/polygram-details.html"),Wd=a(" (this is the original, that the TypeScript+Webpack version in /src/ was based on) and "),zn=p("code"),Jd=a("/demo/polygram-details"),Fd=a(" (already importing /polygram-details)"),qd=c(),Ut=p("li"),Nd=a("Do not run webpack, but just "),Gn=p("code"),Ud=a("polymer serve"),Yd=a(" and test the demo page"),Bd=c(),Z=p("li"),zd=a("Replace "),Vn=p("code"),Gd=a("<script>... code ...<\/script>"),Vd=a(" by "),$n=p("code"),$d=a('<script src="polygram-details.js"><\/script>'),Xd=a(`, extract the JavaScript to
polygram-details.js and test the demo page again: this works.`),Ul=c(),pa=p("p"),Kd=a("Now to TypeScript:"),Yl=c(),Se=p("ul"),N=p("li"),Qd=a("Rename "),Xn=p("code"),Zd=a("polygram-detail.js"),ef=a(" but leave the reference in "),Kn=p("code"),tf=a("polygram-details.html"),sf=a(" to point to the JavaScript version: "),Qn=p("code"),af=a('<script src="polygram-details.js"><\/script>'),nf=c(),L=p("li"),of=a("The package "),Zn=p("code"),pf=a("typescript"),lf=a(" was already installed as a dependency, so use "),eo=p("code"),rf=a("tsc"),cf=a(": "),to=p("code"),uf=a("./node_modules/.bin/tsc polygram-details.ts"),mf=a(`.
This gives errors, but does generate code. The resulting code does not run.`),Bl=c(),la=p("p"),df=a("The first errors are:"),zl=c(),Yt=p("pre"),Gl=c(),U=p("p"),ff=a("Adding "),so=p("code"),kf=a("declare const Polymer: any;"),hf=a(" fixes these 4 errors. It tells TypeScript a global variable "),ao=p("code"),yf=a("Polymer"),wf=a(" can be expected."),Vl=c(),ra=p("p"),bf=a("This leaves the following errors:"),$l=c(),Bt=p("pre"),Xl=c(),Y=p("p"),vf=a(`The current compilation seems to ignore the tsconfig.json, because a similar error was solved earlier by
adding `),no=p("code"),Ef=a('"target": "ESNext"'),gf=a(" in the config. The target can be specified with a flag: "),oo=p("code"),_f=a("./node_modules/.bin/tsc --target ES6 polygram-details.ts"),Pf=a(`.
This runs without errors and works in the browser!`),Kl=c(),ia=p("h3"),Tf=a("Simple compilation and Webpack"),Ql=c(),ca=p("p"),xf=a(`This much simpler approach without Webpack seems to provide a more realistic workflow. Can we afford to leave Webpack
out entirely? Let’s reiterate its purpose:`),Zl=c(),ua=p("h4"),Sf=a("Webpack transpiles to ES5 with Babel"),er=c(),ma=p("p"),jf=a("As mentioned before we don’t need Babel for transpilation, the TypeScript compiler can be set to ES6 or ES5."),tr=c(),da=p("h4"),Af=a("Webpack provides a development server with hot module reloading"),sr=c(),fa=p("p"),If=a("Hot Module Replacement is mainly to ease development, but we can use livereload combined with polyserve instead which would be acceptable for this use case."),ar=c(),ka=p("h4"),Df=a("Webpack handles module bundling"),nr=c(),ha=p("p"),Cf=a(`We can do without ES6 modules or packaging other resources like images as JavaScript modules, because we already have to
deal with Polymer Elements as a component platform. We have to distribute the end result as Polymer Elements to be able to add it to the catalog.`),or=c(),ya=p("p"),Lf=a("Although Polymer 3 will use ES6 modules, a tool is supposed to become available that can migrate from elements from Polymer 2 to Polymer 3 syntax."),pr=c(),wa=p("p"),Mf=a("Without Webpack we lose the module polyfill that is injected per file, which potentially saves a significant size overhead, whilst staying closer to the concept of Polymer Element development."),lr=c(),f=p("p"),Rf=a("Global JavaScript variables from external modules can be made accessible with the "),po=p("code"),Of=a("declare"),Hf=a(` placeholder, and it is still
possible to use `),lo=p("code"),Wf=a("import"),Jf=a(" to import from "),ro=p("code"),Ff=a("node_modules"),qf=a(`.
However, when module is set to `),io=p("code"),Nf=a("none"),Uf=a(` in the tsconfig.json, the variable will just be put onto the “global” scope. This is
not the `),co=p("em"),Yf=a("true"),Bf=a(` global scope, because it is still contained within the Polymer element, so the variable will be on the Polymer
Element scope, and should not leak to the actual global scope.`),rr=c(),zt=p("p"),uo=p("code"),zf=a("Import"),Gf=a(` should still be used with caution: it will lead to code duplication if 2 Polymer+TypeScript elements import the
same dependency. In that case it would be better to import that dependency via HTML import because the Polymer compiler can deduplicate it.`),ir=c(),je=p("p"),Vf=a(`Webpack can also be used to package CSS as modules, but for encapsulating CSS in Polymer the
`),Gt=p("a"),$f=a("Shadow DOM"),Xf=a(` can be used. This is actually an
aspect of web components that is very well executed.`),cr=c(),ba=p("h3"),Kf=a("Automatic compilation"),ur=c(),B=p("p"),Qf=a(`Without Webpack, it is unpractical that for every change to a TypeScript file a manual transformation is needed. Following
the example in the previous section, each time `),mo=p("code"),Zf=a("polygram-details.ts"),ek=a(" changes, "),fo=p("code"),tk=a("./node_modules/.bin/tsc --target ES6 polygram-details.ts"),sk=a(`
must be run. Let’s try to automate this without using Webpack.`),mr=c(),va=p("h4"),ak=a("With tsc"),dr=c(),Ae=p("p"),nk=a("First I make a new tsconfig named "),ko=p("code"),ok=a("tsconfig.inline.json"),pk=a(" for this use case:"),fr=c(),Vt=p("pre"),kr=c(),z=p("p"),lk=a("To compile run "),ho=p("code"),rk=a("./node_modules/.bin/tsc -w -p tsconfig.inline.json"),ik=a(". The "),yo=p("code"),ck=a("-w"),uk=a(` flag keeps the process running and watches for
changes in the included TypeScript files.`),hr=c(),h=p("p"),mk=a("An interesting side-effect occurs. Naturally, each TypeScript file is going to need the "),wo=p("code"),dk=a("declare const Polymer: any;"),fk=a(`
declaration as a workaround for the fact that the Polymer dependency can’t be imported (see previous sections). But
because we now use `),bo=p("code"),kk=a("-p"),hk=a(`, the project flag, the compiler expects all files share global scope. And the second file
using `),vo=p("code"),yk=a("declare const Polymer: any;"),wk=a(" will get an error: "),Eo=p("code"),bk=a("Cannot redeclare block-scoped variable 'Polymer'"),vk=a(`. How can we use
the project flag, without letting the compiler share the global scope between all TypeScript files?`),yr=c(),Ea=p("p"),Ek=a(`A workaround would be to create a TypeScript file that just imports/declares all the expected global variables once.
This would make the code less transparent at best and it might even create other scoping issues.`),wr=c(),ga=p("h3"),gk=a("Custom compilation"),br=c(),Ie=p("p"),_k=a("As an alternative let’s try to run compilation with an isolated scope for each TypeScript file. "),$t=p("a"),Pk=a("This issue"),Tk=a(`
explains that this would be possible by supplying a tsconfig.json for each scope. That would be doable for a limited set
of scopes that is static over time (e.g. a back-end codebase and a front-end codebase in the same project).
However, it makes no sense from a maintenance standpoint for the current project as it would need a tsconfig.json
for each Polymer element.`),vr=c(),_a=p("p"),xk=a("To be complete, I did try this out. First, set up a base tsconfig that can be inherited:"),Er=c(),Xt=p("pre"),gr=c(),Pa=p("p"),Sk=a("Now for each Polymer TypeScript file a tsconfig, e.g.:"),_r=c(),Kt=p("pre"),Pr=c(),G=p("p"),jk=a("It is now possible to compile/watch polygram-details.ts with "),go=p("code"),Ak=a("tsc -w -p polygram-details.tsconfig.json"),Ik=a(`, but it is
still not possible to compile/watch multiple tsconfigs at `),_o=p("em"),Dk=a("the same time"),Ck=a("."),Tr=c(),y=p("p"),Lk=a("In this case it would be better to forget about the watch flag "),Po=p("code"),Mk=a("-w"),Rk=a(" altogether and just use "),To=p("code"),Ok=a("npm watch"),Hk=a(` combined with
`),xo=p("code"),Wk=a("tsc [changedfile]"),Jk=a(`. You can’t use a tsconfig.json combined with an input file path for tsc, so all options must be
supplied as flags: `),So=p("code"),Fk=a("tsc --target ES6 --sourceMap [changedFile]"),qk=a("."),xr=c(),x=p("p"),Nk=a("I tried combining this compilation one-liner with a watch script, but I could not get this to work with "),Qt=p("a"),Uk=a("nodemon"),Yk=a(`,
`),Zt=p("a"),Bk=a("npm-watch"),zk=a(" or "),es=p("a"),Gk=a("watch"),Vk=a(", so I wrote a small script:"),Sr=c(),ts=p("pre"),jr=c(),Ta=p("p"),$k=a("Now it is possible to watch each TypeScript file and compile it with its scope isolated from the other TypeScript files."),Ar=c(),xa=p("h2"),Xk=a("twc"),Ir=c(),S=p("p"),Kk=a("With "),jo=p("code"),Qk=a("ts-poly-watch.js"),Zk=a(` it looks like we finally have an acceptable working environment. I have extracted the script to
its own project `),ss=p("a"),eh=a("typescript-batch-compiler"),th=a(" and "),as=p("a"),sh=a("npm package"),ah=a(` because
there is much room for improvement and it will be easier to use in other projects if it is an npm package.`),Dr=c(),j=p("p"),nh=a("So are we now done? In fact there is one more thing I want to explore. During the research I ran into "),ns=p("a"),oh=a("twc"),ph=a(`.
This is a compiler for `),Ao=p("em"),lh=a("TypeScript Web Components"),rh=a(` and can be used to compile TypeScript classes to Polymer 2 elements.
Although this sounds like it is similar to my `),Io=p("code"),ih=a("typescript-batch-compiler"),ch=a(", here are some preliminary findings:"),Cr=c(),De=p("ol"),os=p("li"),uh=a(`It assumes a TypeScript file as the entrypoint: in my setup I still stay close to the Polymer setup with a
Polymer element (so HTML) that includes a script file. With `),Do=p("code"),mh=a("twc"),dh=a(` the entrypoint is a TypeScript file that imports an HTML template.
A great advantage is that this is more like Polymer 3 and also similar to other component driven frameworks
like React, Vue and Angular. The disadvantage is of course that the style will be foreign to other Polymer developers.`),fh=c(),ee=p("li"),kh=a(`It’s still very experimental. There is no example in the repo or an explanation of how to set up a basic element in the
README, but a general approach is outlined `),ps=p("a"),hh=a("on the project wiki"),yh=a(`
and examples of twc in a project can be found in `),ls=p("a"),wh=a("this generator project"),bh=a("."),Lr=c(),Sa=p("p"),vh=a("With the aforementioned wiki, I take these steps:"),Mr=c(),Ce=p("ul"),rs=p("li"),Eh=a("Run "),Co=p("code"),gh=a("twc"),_h=a(" in a new subdir of the project appropriately named “twc”"),Ph=c(),Lo=p("li"),Th=a("Set up a very basic polygram-twc.ts conforming to the style as outlined in the wiki:"),Rr=c(),is=p("pre"),Or=c(),A=p("ul"),M=p("li"),xh=a("Run "),Mo=p("code"),Sh=a("tsc --init"),jh=a(` to create a new tsconfig.json in the twc dir. This turns out to be important. When I re-use my existing
tsconfig.json the build fails with `),Ro=p("code"),Ah=a("Error: Debug Failure."),Ih=a(". This seems to be caused by the line "),Oo=p("code"),Dh=a('"moduleResolution": "node"'),Ch=a(`,
which is not needed for this compilation.`),Lh=c(),cs=p("li"),Mh=a("Add "),Ho=p("code"),Rh=a("node_modules/twc/types/polymer.decorators.d.ts"),Oh=a(" to the include section of the tsconfig.json, to resolve certain types."),Hh=c(),us=p("li"),Wh=a("Build in the twc dir by running "),Wo=p("code"),Jh=a("../node_modules/.bin/twc polygram-twc.ts"),Fh=a("."),qh=c(),Jo=p("li"),Nh=a("A polygram-twc.html is created."),Hr=c(),Le=p("p"),Uh=a(`I also converted the original polygram-details.html (the one with embedded JavaScript) to this format. See the result
in `),ms=p("a"),Yh=a("the repo for this experiment"),Bh=a(`. When working on this
conversion, some differences with normal web components become apparent:`),Wr=c(),I=p("ul"),ja=p("li"),zh=a("twc auto-injects the registration of the component: "),Fo=p("code"),Gh=a("customElements.define(PolygramDetails.is, PolygramDetails);"),Vh=c(),ds=p("li"),qo=p("code"),$h=a("import './polygram-ui-details';"),Xh=a(" is converted to "),No=p("code"),Kh=a('<link rel="import" href="./polygram-ui-details.html">'),Qh=c(),te=p("li"),Zh=a("the "),Uo=p("code"),ey=a("is"),ty=a(" getter, i.e. this: "),Yo=p("code"),sy=a("static get is() { return 'polygram-details'; }"),ay=a(`
is auto generated from the class name.`),ny=c(),Bo=p("li"),oy=a("The JSDoc is converted to an HTML comment."),Jr=c(),Me=p("p"),py=a(`This syntax uses plain ES modules and is therefore also closer to Polymer 3. Still there are some differences.
Compare the code for polygram-twc.ts but in `),fs=p("a"),ly=a("Polymer 3 syntax"),ry=a(":"),Fr=c(),ks=p("pre"),qr=c(),Aa=p("p"),iy=a(`Although I can’t find any sources, I heard that Polymer 3 would supply an auto converter from (normal) Polymer 2 syntax.
You could use that converter on the output of twc, so this should not be a reason to avoid twc.`),Nr=c(),Ia=p("h2"),cy=a("Final remarks"),Ur=c(),Re=p("p"),uy=a(`Unit testing and coverage support when using TypeScript has not been mentioned, but I hope it is clear that it is
unchanged from a normal Polymer 2 application when using typescript-batch-compiler. You can just use
`),hs=p("a"),my=a("WCT"),dy=a(`), because all components
are compiled to a state that conforms to a non-TypeScript Polymer 2 situation.`),Yr=c(),D=p("p"),fy=a("For the Webpack approach it would be an improvement to see why "),zo=p("code"),ky=a("polymer-webpack-loader"),hy=a(` is not importing Polymer when
using `),Go=p("code"),yy=a("import Polymer from '../bower_components/polymer/polymer-element.html'"),wy=a(`
or `),Vo=p("code"),by=a("import '../bower_components/polymer/polymer-element.html'"),vy=a("."),Br=c(),Oe=p("p"),Ey=a("It could also be an improvement to add the "),ys=p("a"),gy=a("prettier"),_y=a(` plugin to promote a
consistent coding style. This could be added to TSLint via Webpack, but could also be integrated in the
typescript-batch-compiler package.`),this.h()},l(e){b=l(e,"P",{});var o=r(b);Li=n(o,"For "),bs=l(o,"A",{href:!0});var Dy=r(bs);Mi=n(Dy,"reasons beyond my control"),Dy.forEach(t),Ri=n(o,` I’m working with
Polymer 2 at the moment. Although the idea of web components is great, the choice for HTML imports that comes with
Polymer 2 makes integration into a modern development stack cumbersome, as will become clear soon. Also, HTML
imports are not widely supported by browsers and although polyfills exist, only `),Ke=l(o,"A",{href:!0,rel:!0});var Cy=r(Ke);Oi=n(Cy,"Chrome (surprise!)"),Cy.forEach(t),Hi=n(o,`
will have native support for the foreseeable future.`),o.forEach(t),$o=u(e),v=l(e,"P",{});var He=r(v);Wi=n(He,`Using TypeScript seems like a good choice, because static typing helps prevent runtime errors. Additionally it would be a
good opportunity to try out the `),Qe=l(He,"A",{href:!0,rel:!0});var Ly=r(Qe);Ji=n(Ly,"Scala-TS-interfaces project"),Ly.forEach(t),Fi=n(He,` by my
colleagues, that can generate TypeScript from a Scala domain model. Unfortunately, adding TypeScript to a Polymer 2
development stack proves to be difficult, whereas using it with Polymer 3 seems trivial. Polymer 3 is currently in
preview so it is not a viable option for me for the moment, but it will exchange HTML imports for ES6 Modules. This will
make integrating it into a modern development stack much easier. An `),Ze=l(He,"A",{href:!0,rel:!0});var My=r(Ze);qi=n(My,"example"),My.forEach(t),Ni=n(He,`
already exists, by `),et=l(He,"A",{href:!0,rel:!0});var Ry=r(et);Ui=n(Ry,"Paolo Ferretti"),Ry.forEach(t),Yi=n(He," and follows normal conventions for a TypeScript project."),He.forEach(t),Xo=u(e),se=l(e,"P",{});var zr=r(se);Bi=n(zr,"If you’re adventurous, don’t need any "),tt=l(zr,"A",{href:!0,rel:!0});var Oy=r(tt);zi=n(Oy,"existing Polymer 2 elements"),Oy.forEach(t),Gi=n(zr,` and don’t need to
run production; stop reading here and use Polymer 3.
If you need Polymer 2 read on, but be warned that it won’t be pretty.`),zr.forEach(t),Ko=u(e),vs=l(e,"P",{});var Hy=r(vs);K=l(Hy,"STRONG",{});var Da=r(K);Vi=n(Da,"TL;DR to use TypeScript with Polymer 2 use "),st=l(Da,"A",{href:!0,rel:!0});var Wy=r(st);$i=n(Wy,"typescript-batch-compiler"),Wy.forEach(t),Xi=n(Da," or even better "),at=l(Da,"A",{href:!0,rel:!0});var Jy=r(at);Ki=n(Jy,"twc"),Jy.forEach(t),Qi=n(Da,"."),Da.forEach(t),Hy.forEach(t),Qo=u(e),Es=l(e,"H2",{});var Fy=r(Es);Zi=n(Fy,"Webpack"),Fy.forEach(t),Zo=u(e),ae=l(e,"P",{});var Gr=r(ae);ec=n(Gr,"For this experiment I will use my existing Polygram project and the result will be available in the "),nt=l(Gr,"A",{href:!0,rel:!0});var qy=r(nt);tc=n(qy,"TypeScript branch"),qy.forEach(t),sc=n(Gr,"."),Gr.forEach(t),ep=u(e),k=l(e,"P",{});var V=r(k);ac=n(V,`The first challenge is to use Webpack with Polymer 2. Although not strictly necessary for TypeScript compilation, it would
make sense for importing HTML as modules. Fortunately, `),ot=l(V,"A",{href:!0,rel:!0});var Ny=r(ot);nc=n(Ny,"Rob Dodson himself"),Ny.forEach(t),oc=n(V,` wrote an
article `),pt=l(V,"A",{href:!0,rel:!0});var Uy=r(pt);pc=n(Uy,"How to use Polymer with Webpack"),Uy.forEach(t),lc=n(V,`. It even mentions TypeScript!
The article introduces the Webpack loader `),lt=l(V,"A",{href:!0,rel:!0});var Yy=r(lt);rc=n(Yy,"https://github.com/webpack-contrib/polymer-webpack-loader"),Yy.forEach(t),ic=n(V,` and
explains how it extracts the JavaScript from the HTML of Polymer elements and eventually packages everything into one
JavaScript file. I was basically able to copy the webpack.config.js and index.ejs from his demo project, place it into Polygram and that would compile. I moved my
`),rt=l(V,"A",{href:!0,rel:!0});var By=r(rt);cc=n(By,"custom elements"),By.forEach(t),uc=n(V,` from the root of the project to the src dir and I had
to modify the paths to the bower_components and it would basically work.`),V.forEach(t),tp=u(e),E=l(e,"P",{});var We=r(E);mc=n(We,`The most important exception is Redux, the redux-mixin.html can’t resolve the PolymerRedux.html dependency (in bower_components/polymer-redux/polymer-redux.html).
The polymer-webpack-loader should resolve this, but runtime it logs `),Va=l(We,"CODE",{});var zy=r(Va);dc=n(zy,"Uncaught ReferenceError: PolymerRedux is not defined"),zy.forEach(t),fc=n(We,`.
E.g. for src/polygram-app.html, the loader seems to import the HTML elements that are used in the `),$a=l(We,"CODE",{});var Gy=r($a);kc=n(Gy,"template"),Gy.forEach(t),hc=n(We,` element,
but not the JavaScript variables that are used in the `),Xa=l(We,"CODE",{});var Vy=r(Xa);yc=n(Vy,"script"),Vy.forEach(t),wc=n(We," element."),We.forEach(t),sp=u(e),g=l(e,"P",{});var Je=r(g);bc=n(Je,"The PolymerRedux code is distributed as JavaScript wrapped in a "),Ka=l(Je,"CODE",{});var $y=r(Ka);vc=n($y,"script"),$y.forEach(t),Ec=n(Je,` tag in mainly one file, so it would be easy to
extract it to a JavaScript file. Or even to import `),Qa=l(Je,"CODE",{});var Xy=r(Qa);gc=n(Xy,"polymer-redux/src/index.js"),Xy.forEach(t),_c=n(Je," instead of "),Za=l(Je,"CODE",{});var Ky=r(Za);Pc=n(Ky,"polymer-redux/polymer-redux.html"),Ky.forEach(t),Tc=n(Je,`
(although index.js is uncompiled and misses external dependencies that are not installed in bower_components because they are development dependencies of polymer-redux).
For now, I just comment out the Redux dependencies.`),Je.forEach(t),ap=u(e),ne=l(e,"P",{});var Vr=r(ne);xc=n(Vr,`It is already clear now that the result from Webpack will be one huge bundle.js that inlines all JavaScript and HTML
dependencies. This means using the `),it=l(Vr,"A",{href:!0,rel:!0});var Qy=r(it);Sc=n(Qy,"PRPL pattern"),Qy.forEach(t),jc=n(Vr,` will not be possible
in this workflow, nor will it be possible to have standalone Polymer components and the accompanying Polymer demo pages.`),Vr.forEach(t),np=u(e),gs=l(e,"H2",{});var Zy=r(gs);Ac=n(Zy,"Adding ts-loader"),Zy.forEach(t),op=u(e),oe=l(e,"P",{});var $r=r(oe);Ic=n($r,"Normally, to migrate a Webpack project from JavaScript to TypeScript, it would be enough to add the "),ct=l($r,"A",{href:!0,rel:!0});var ew=r(ct);Dc=n(ew,"ts-loader"),ew.forEach(t),Cc=n($r,`
to the Webpack config and to rename the JavaScript files to TypeScript files.`),$r.forEach(t),pp=u(e),_s=l(e,"P",{});var tw=r(_s);Lc=n(tw,"So I started with changing the extension for the bootstrapping index.js and adding .ts as a resolved extension:"),tw.forEach(t),lp=u(e),ut=l(e,"PRE",{class:!0});var Q2=r(ut);Q2.forEach(t),rp=u(e),Ps=l(e,"P",{});var sw=r(Ps);Mc=n(sw,"And adding this rule:"),sw.forEach(t),ip=u(e),mt=l(e,"PRE",{class:!0});var Z2=r(mt);Z2.forEach(t),cp=u(e),Ts=l(e,"P",{});var aw=r(Ts);Rc=n(aw,"And creating a tsconfig.json:"),aw.forEach(t),up=u(e),dt=l(e,"PRE",{class:!0});var eE=r(dt);eE.forEach(t),mp=u(e),xs=l(e,"P",{});var nw=r(xs);Oc=n(nw,`Everything still compiles, but the JavaScript for the Polymer components is embedded in the HTML and therefore ignored
by the new rule with the ts-loader.`),nw.forEach(t),dp=u(e),Ss=l(e,"P",{});var ow=r(Ss);Hc=n(ow,"Adding the ts-loader to the rule for the HTML files breaks compilation:"),ow.forEach(t),fp=u(e),ft=l(e,"PRE",{class:!0});var tE=r(ft);tE.forEach(t),kp=u(e),js=l(e,"P",{});var pw=r(js);Wc=n(pw,"Even without changing any of the code itself, compilation fails with:"),pw.forEach(t),hp=u(e),kt=l(e,"PRE",{class:!0});var sE=r(kt);sE.forEach(t),yp=u(e),pe=l(e,"P",{});var Xr=r(pe);Jc=n(Xr,"Well, that just doesn’t look healthy. I filed "),ht=l(Xr,"A",{href:!0,rel:!0});var lw=r(ht);Fc=n(lw,"a bug"),lw.forEach(t),qc=n(Xr,`
and almost 2 months after my report the maintainers closed the issue commenting that the root cause is with Webpack, so I
don’t see this will be resolved any time soon.`),Xr.forEach(t),wp=u(e),As=l(e,"P",{});var rw=r(As);Nc=n(rw,"For now, I will try to work around it by extracting the TypeScript code to a separate file."),rw.forEach(t),bp=u(e),Is=l(e,"H3",{});var iw=r(Is);Uc=n(iw,"Workaround for TypeScript compilation in a Polymer element"),iw.forEach(t),vp=u(e),le=l(e,"P",{});var Kr=r(le);Yc=n(Kr,"After removing the "),en=l(Kr,"CODE",{});var cw=r(en);Bc=n(cw,"ts-loader"),cw.forEach(t),zc=n(Kr,` line from the HTML rule in the webpack.config.js I set out to extract the TypeScript to a
separate file so it can be compiled with the rule that matches ts files.`),Kr.forEach(t),Ep=u(e),re=l(e,"P",{});var Qr=r(re);Gc=n(Qr,"Roughly, the main entry point for the Polymer elements "),tn=l(Qr,"CODE",{});var uw=r(tn);Vc=n(uw,"polygram-app.html"),uw.forEach(t),$c=n(Qr," contains:"),Qr.forEach(t),gp=u(e),yt=l(e,"PRE",{class:!0});var aE=r(yt);aE.forEach(t),_p=u(e),ie=l(e,"P",{});var Zr=r(ie);Xc=n(Zr,"Since I know the "),sn=l(Zr,"CODE",{});var mw=r(sn);Kc=n(mw,"import"),mw.forEach(t),Qc=n(Zr,` statement in the script tag works, I can use this to my advantage. Lets create a companion
TypeScript file for polygram-app.html named PolygramApp.ts.`),Zr.forEach(t),Pp=u(e),wt=l(e,"PRE",{class:!0});var nE=r(wt);nE.forEach(t),Tp=u(e),ce=l(e,"P",{});var ei=r(ce);Zc=n(ei,"It would be possible to import PolygramApp.ts with "),an=l(ei,"CODE",{});var dw=r(an);eu=n(dw,'<script src="PolygramApp.ts"><\/script'),dw.forEach(t),tu=n(ei,`, but I like the standard ES6 module structure
of PolygramApp.ts without the added responsibility of registering itself to customElements, so I import it like this:`),ei.forEach(t),xp=u(e),bt=l(e,"PRE",{class:!0});var oE=r(bt);oE.forEach(t),Sp=u(e),Ds=l(e,"P",{});var fw=r(Ds);su=n(fw,"The result is a failed compilation with 3 types of errors. Let’s deal with them one by one."),fw.forEach(t),jp=u(e),Cs=l(e,"H3",{});var kw=r(Cs);au=n(kw,"1. Failing accessors"),kw.forEach(t),Ap=u(e),_=l(e,"P",{});var Fe=r(_);nu=n(Fe,"The "),nn=l(Fe,"CODE",{});var hw=r(nn);ou=n(hw,"is"),hw.forEach(t),pu=n(Fe," and "),on=l(Fe,"CODE",{});var yw=r(on);lu=n(yw,"properties"),yw.forEach(t),ru=n(Fe,` getters require a specifically set target ECMAScript version, the compilation error is:
`),pn=l(Fe,"CODE",{});var ww=r(pn);iu=n(ww,"error TS1056: Accessors are only available when targeting ECMAScript 5 and higher"),ww.forEach(t),cu=n(Fe,`. It surprises me that the default
ES target is ES3, but it’s not a problem to use ES5 or even ESNext here, because the babel-loader will transpile it back to ES5.`),Fe.forEach(t),Ip=u(e),ue=l(e,"P",{});var ti=r(ue);uu=n(ti,"Adding "),ln=l(ti,"CODE",{});var bw=r(ln);mu=n(bw,'"target": "ESNext"'),bw.forEach(t),du=n(ti," to compilerOptions in the tsconfig.json fixes this error."),ti.forEach(t),Dp=u(e),Ls=l(e,"H3",{});var vw=r(Ls);fu=n(vw,"2. Failing Polymer import"),vw.forEach(t),Cp=u(e),d=l(e,"P",{});var w=r(d);rn=l(w,"CODE",{});var Ew=r(rn);ku=n(Ew,"Polymer"),Ew.forEach(t),hu=n(w," can’t be found for the "),cn=l(w,"CODE",{});var gw=r(cn);yu=n(gw,"extends"),gw.forEach(t),wu=n(w,`. This is the most difficult of these errors to solve, because it is caused by the preferred module
architecture of Polymer 2: because HTML imports are used, it is not possible to use `),un=l(w,"CODE",{});var _w=r(un);bu=n(_w,"import Polymer from '../bower_components/polymer/polymer-element.html'"),_w.forEach(t),vu=n(w,`
because this polymer-element does not export `),mn=l(w,"CODE",{});var Pw=r(mn);Eu=n(Pw,"Polymer"),Pw.forEach(t),gu=n(w,` as an ES6 module. The webpack-polymer-loader can resolve HTML
imports, but using `),dn=l(w,"CODE",{});var Tw=r(dn);_u=n(Tw,"import '../bower_components/polymer/polymer-element.html'"),Tw.forEach(t),Pu=n(w," results in an "),fn=l(w,"CODE",{});var xw=r(fn);Tu=n(xw,"error TS2304: Cannot find name 'Polymer'"),xw.forEach(t),xu=n(w,"."),w.forEach(t),Lp=u(e),R=l(e,"P",{});var Ca=r(R);Su=n(Ca,"For the moment, I’m just removing the "),kn=l(Ca,"CODE",{});var Sw=r(kn);ju=n(Sw,"extends Polymer.Element"),Sw.forEach(t),Au=n(Ca," from PolygramApps.ts and "),hn=l(Ca,"CODE",{});var jw=r(hn);Iu=n(jw,"window.customElements.define(PolygramApp.is, PolygramApp);"),jw.forEach(t),Du=n(Ca," from polygram-app.html."),Ca.forEach(t),Mp=u(e),Ms=l(e,"H3",{});var Aw=r(Ms);Cu=n(Aw,"3. Failing date-fns import"),Aw.forEach(t),Rp=u(e),Rs=l(e,"P",{});var Iw=r(Rs);Lu=n(Iw,"To be able to continue resolving the compilation errors, I add a log statement to polygram-app.html:"),Iw.forEach(t),Op=u(e),vt=l(e,"PRE",{class:!0});var pE=r(vt);pE.forEach(t),Hp=u(e),me=l(e,"P",{});var si=r(me);Mu=n(si,`The import of date-fns originally failed in the TypeScript compilation with
`),yn=l(si,"CODE",{});var Dw=r(yn);Ru=n(Dw,"error TS1192: Module ''date-fns/format'' has no default export."),Dw.forEach(t),Ou=n(si," but at this point that has two different behaviors:"),si.forEach(t),Wp=u(e),de=l(e,"UL",{});var ai=r(de);Os=l(ai,"LI",{});var Py=r(Os);Hu=n(Py,"The IDE warns "),wn=l(Py,"CODE",{});var Cw=r(wn);Wu=n(Cw,"TS2307 Cannot find module date-fns"),Cw.forEach(t),Py.forEach(t),Ju=u(ai),Hs=l(ai,"LI",{});var Ty=r(Hs);Fu=n(Ty,"Compilation succeeds, but this error is logged in the browser: "),bn=l(Ty,"CODE",{});var Lw=r(bn);qu=n(Lw,"Uncaught TypeError: format_1.default is not a function(…)"),Lw.forEach(t),Ty.forEach(t),ai.forEach(t),Jp=u(e),fe=l(e,"P",{});var ni=r(fe);Nu=n(ni,`I first thought that this was caused by missing typings for the date-fns library, so I tried
`),vn=l(ni,"CODE",{});var Mw=r(vn);Uu=n(Mw,"npm install @types/date-fns"),Mw.forEach(t),Yu=n(ni," but this logs that date-fns actually provides typings."),ni.forEach(t),Fp=u(e),Ws=l(e,"P",{});var Rw=r(Ws);Bu=n(Rw,"Eventually I was able to fix the Uncaught TypeError by changing the import in PolygramApp.ts from"),Rw.forEach(t),qp=u(e),Et=l(e,"PRE",{class:!0});var lE=r(Et);lE.forEach(t),Np=u(e),Js=l(e,"P",{});var Ow=r(Js);zu=n(Ow,"to"),Ow.forEach(t),Up=u(e),gt=l(e,"PRE",{class:!0});var rE=r(gt);rE.forEach(t),Yp=u(e),ke=l(e,"P",{});var oi=r(ke);Gu=n(oi,"And the IDE warning by adding "),En=l(oi,"CODE",{});var Hw=r(En);Vu=n(Hw,'"moduleResolution": "node"'),Hw.forEach(t),$u=n(oi," to the compilerOptions in tsconfig.json."),oi.forEach(t),Bp=u(e),Fs=l(e,"P",{});var Ww=r(Fs);Xu=n(Ww,"At this point, although nothing is rendered, because of the added log statement the current date is logged to the browser console."),Ww.forEach(t),zp=u(e),qs=l(e,"H3",{});var Jw=r(qs);Ku=n(Jw,"Failing Polymer import, continued"),Jw.forEach(t),Gp=u(e),he=l(e,"P",{});var pi=r(he);Qu=n(pi,`Now the import succeeds and it is clear that the TypeScript compiler correctly processes PolygramApp.ts, it is time to
try to fix the import of the `),gn=l(pi,"CODE",{});var Fw=r(gn);Zu=n(Fw,"Polymer"),Fw.forEach(t),em=n(pi," module in PolygramApp.ts."),pi.forEach(t),Vp=u(e),Ns=l(e,"P",{});var qw=r(Ns);tm=n(qw,`A possible workaround will be to not try to import HTML imports in the TypeScript file, but instead to supply those dependencies
through the HTML that is importing the TypeScript file. To do this, I change the respective files to:`),qw.forEach(t),$p=u(e),_t=l(e,"PRE",{class:!0});var iE=r(_t);iE.forEach(t),Xp=u(e),Pt=l(e,"PRE",{class:!0});var cE=r(Pt);cE.forEach(t),Kp=u(e),Us=l(e,"P",{});var Nw=r(Us);sm=n(Nw,"Now everything compiles without errors and the custom elements are rendered again!"),Nw.forEach(t),Qp=u(e),O=l(e,"P",{});var La=r(O);am=n(La,"Note here that I also added a "),_n=l(La,"CODE",{});var Uw=r(_n);nm=n(Uw,"string"),Uw.forEach(t),om=n(La," type to "),Pn=l(La,"CODE",{});var Yw=r(Pn);pm=n(Yw,"const label"),Yw.forEach(t),lm=n(La," to see if typings work."),La.forEach(t),Zp=u(e),Ys=l(e,"H3",{});var Bw=r(Ys);rm=n(Bw,"Re-enabling Redux"),Bw.forEach(t),el=u(e),P=l(e,"P",{});var qe=r(P);im=n(qe,"Earlier, Redux was disabled to test Webpack. It was failing with the runtime error "),Tn=l(qe,"CODE",{});var zw=r(Tn);cm=n(zw,"Uncaught ReferenceError: PolymerRedux is not defined"),zw.forEach(t),um=n(qe," To re-enable it, I convert the "),xn=l(qe,"CODE",{});var Gw=r(xn);mm=n(Gw,"polymer-redux/polymer-redux.html"),Gw.forEach(t),dm=n(qe,` from
bower_components to a local PolymerRedux.js, by just removing the `),Sn=l(qe,"CODE",{});var Vw=r(Sn);fm=n(Vw,"script"),Vw.forEach(t),km=n(qe," tags."),qe.forEach(t),tl=u(e),ye=l(e,"P",{});var li=r(ye);hm=n(li,"Because redux-mixin.html, action.html, and reducer.html actually are already JavaScript wrapped in "),jn=l(li,"CODE",{});var $w=r(jn);ym=n($w,"script"),$w.forEach(t),wm=n(li,` tags, I just convert
them to TypeScript files, for example:`),li.forEach(t),sl=u(e),Tt=l(e,"PRE",{class:!0});var uE=r(Tt);uE.forEach(t),al=u(e),Bs=l(e,"P",{});var Xw=r(Bs);bm=n(Xw,"To use it in PolygramApp.ts, it can now be imported like a normal ES6 module:"),Xw.forEach(t),nl=u(e),xt=l(e,"PRE",{class:!0});var mE=r(xt);mE.forEach(t),ol=u(e),zs=l(e,"P",{});var Kw=r(zs);vm=n(Kw,"After making similar modifications for polygram-searchbox, the Redux events work again as before introducing TypeScript."),Kw.forEach(t),pl=u(e),Gs=l(e,"H2",{});var Qw=r(Gs);Em=n(Qw,"Importing a global variable from HTML"),Qw.forEach(t),ll=u(e),we=l(e,"P",{});var ri=r(we);gm=n(ri,"At this point PolymerRedux is loaded from a custom PolymerRedux.js that I made in the previous step by removing the "),An=l(ri,"CODE",{});var Zw=r(An);_m=n(Zw,"<script>"),Zw.forEach(t),Pm=n(ri,`
tags from the file in bower_components. Although this works, it would be better to use the file in bower_components
directly because it will be easier to handle updates to this external package.`),ri.forEach(t),rl=u(e),Vs=l(e,"P",{});var eb=r(Vs);Tm=n(eb,"Currently I import the custom PolymerRedux.js in state/ReduxMixin.ts with:"),eb.forEach(t),il=u(e),St=l(e,"PRE",{class:!0});var dE=r(St);dE.forEach(t),cl=u(e),be=l(e,"P",{});var ii=r(be);xm=n(ii,`To load the HTML from the bower_components, I expect to have to use the polymer-webpack-loader to extract the JavaScript
from the `),In=l(ii,"CODE",{});var tb=r(In);Sm=n(tb,"script"),tb.forEach(t),jm=n(ii," tags:"),ii.forEach(t),ul=u(e),jt=l(e,"PRE",{class:!0});var fE=r(jt);fE.forEach(t),ml=u(e),ve=l(e,"P",{});var ci=r(ve);Am=n(ci,"This fails to compile with the message that PolymerRedux is undefined, so I add the "),At=l(ci,"A",{href:!0,rel:!0});var sb=r(At);Im=n(sb,"debug-loader"),sb.forEach(t),Dm=n(ci,` to
investigate what the result of each step looks like:`),ci.forEach(t),dl=u(e),It=l(e,"PRE",{class:!0});var kE=r(It);kE.forEach(t),fl=u(e),T=l(e,"P",{});var Ne=r(T);Cm=n(Ne,"Thanks to debug-loader it is immediately clear that already before going into the polymer-webpack-loader the "),Dn=l(Ne,"CODE",{});var ab=r(Dn);Lm=n(ab,"script"),ab.forEach(t),Mm=n(Ne,` tags have
been stripped. Just using require without any loaders turns something likes this `),Cn=l(Ne,"CODE",{});var nb=r(Cn);Rm=n(nb,"<script>foo()<\/script>"),nb.forEach(t),Om=n(Ne," into "),Ln=l(Ne,"CODE",{});var ob=r(Ln);Hm=n(ob,"foo()"),ob.forEach(t),Wm=n(Ne,`
and webpack-polymer-loader is not needed in this case. I do think this only works when the file is completely self
contained and does not have dependencies with other Polymer HTML files.`),Ne.forEach(t),kl=u(e),$s=l(e,"P",{});var pb=r($s);Jm=n(pb,"This is the final working import:"),pb.forEach(t),hl=u(e),Dt=l(e,"PRE",{class:!0});var hE=r(Dt);hE.forEach(t),yl=u(e),Xs=l(e,"H2",{});var lb=r(Xs);Fm=n(lb,"Linting"),lb.forEach(t),wl=u(e),H=l(e,"P",{});var Ma=r(H);qm=n(Ma,"Although there is a "),Ct=l(Ma,"A",{href:!0,rel:!0});var rb=r(Ct);Nm=n(rb,"polymer-linter"),rb.forEach(t),Um=n(Ma,", it is "),Lt=l(Ma,"A",{href:!0,rel:!0});var ib=r(Lt);Ym=n(ib,"advised"),ib.forEach(t),Bm=n(Ma,` to
use Polymer Linter combined with other linters, and an obvious choice is TSLint.`),Ma.forEach(t),bl=u(e),Ks=l(e,"P",{});var cb=r(Ks);zm=n(cb,"The way that TSLint is configured with Webpack means that it will only lint TypeScript that is not embedded in HTML:"),cb.forEach(t),vl=u(e),Mt=l(e,"PRE",{class:!0});var yE=r(Mt);yE.forEach(t),El=u(e),Qs=l(e,"P",{});var ub=r(Qs);Gm=n(ub,`Before I started with this experiment I thought this might be a problem. But now almost all script has been extracted to
separate TypeScript files anyway, so this works quite well.`),ub.forEach(t),gl=u(e),Rt=l(e,"P",{});var xy=r(Rt);Vm=n(xy,"Of course it is also still possible to run TSLint manually for a file, e.g. "),Mn=l(xy,"CODE",{});var mb=r(Mn);$m=n(mb,"./node_modules/.bin/tslint --config tslint.json polygram-marvel-details.ts"),mb.forEach(t),xy.forEach(t),_l=u(e),Ee=l(e,"P",{});var ui=r(Ee);Xm=n(ui,"It is still required to run "),Rn=l(ui,"CODE",{});var db=r(Rn);Km=n(db,"polymer lint"),db.forEach(t),Qm=n(ui," manually. As far as I know there is no integration for Webpack yet."),ui.forEach(t),Pl=u(e),Zs=l(e,"H2",{});var fb=r(Zs);Zm=n(fb,"Decorators"),fb.forEach(t),Tl=u(e),W=l(e,"P",{});var Ra=r(W);ed=n(Ra,"I want to see if I can use "),Ot=l(Ra,"A",{href:!0,rel:!0});var kb=r(Ot);td=n(kb,"ES decorators"),kb.forEach(t),sd=n(Ra,`,
because decorators conceptually fit with the Mixin pattern used in Polymer
for e.g. `),On=l(Ra,"CODE",{});var hb=r(On);ad=n(hb,"class MyElement extends ReduxMixin(Polymer.Element)"),hb.forEach(t),nd=n(Ra,`. It would be tidy if we could write this as a decorator,
especially if more mixins would need to be combined:`),Ra.forEach(t),xl=u(e),Ht=l(e,"PRE",{class:!0});var wE=r(Ht);wE.forEach(t),Sl=u(e),ge=l(e,"P",{});var mi=r(ge);od=n(mi,"As a test, I just add an "),Wt=l(mi,"A",{href:!0,rel:!0});var yb=r(Wt);pd=n(yb,"example decorator"),yb.forEach(t),ld=n(mi,`
to the class in polygram-details.ts:`),mi.forEach(t),jl=u(e),Jt=l(e,"PRE",{class:!0});var bE=r(Jt);bE.forEach(t),Al=u(e),ea=l(e,"P",{});var wb=r(ea);rd=n(wb,"And in the same file, but outside the class, the definition of the decorator:"),wb.forEach(t),Il=u(e),Ft=l(e,"PRE",{class:!0});var vE=r(Ft);vE.forEach(t),Dl=u(e),ta=l(e,"P",{});var bb=r(ta);id=n(bb,"The compiler fails with:"),bb.forEach(t),Cl=u(e),qt=l(e,"PRE",{class:!0});var EE=r(qt);EE.forEach(t),Ll=u(e),J=l(e,"P",{});var Oa=r(J);cd=n(Oa,"This flag can be added to the compilerOptions section of the tsconfig.json: "),Hn=l(Oa,"CODE",{});var vb=r(Hn);ud=n(vb,"'experimentalDecorators': true"),vb.forEach(t),md=n(Oa,`. The
compilation now succeeds, but prepends a small polyfill for `),Wn=l(Oa,"CODE",{});var Eb=r(Wn);dd=n(Eb,"decorator"),Eb.forEach(t),fd=n(Oa,` to the output. Take this into account when using
decorator in many files, because it will cause an overhead that might be avoided by using a third party library that is
imported globally.`),Oa.forEach(t),Ml=u(e),sa=l(e,"H2",{});var gb=r(sa);kd=n(gb,"App vs Element"),gb.forEach(t),Rl=u(e),aa=l(e,"P",{});var _b=r(aa);hd=n(_b,"It is one thing to compile Typescript for a Polymer app, but another thing to use TypeScript for reusable Polymer components."),_b.forEach(t),Ol=u(e),_e=l(e,"P",{});var di=r(_e);yd=n(di,`The next step will be to compile the Polymer components in this test project separately. As a result, each converted
component should both be loaded into its own `),Nt=l(di,"A",{href:!0,rel:!0});var Pb=r(Nt);wd=n(Pb,"demo page"),Pb.forEach(t),bd=n(di," and to be composed into a Polymer app."),di.forEach(t),Hl=u(e),Pe=l(e,"P",{});var fi=r(Pe);vd=n(fi,"The demo pages should be accessible by running "),Jn=l(fi,"CODE",{});var Tb=r(Jn);Ed=n(Tb,"polymer serve"),Tb.forEach(t),gd=n(fi,", conform the normal Polymer workflow."),fi.forEach(t),Wl=u(e),F=l(e,"P",{});var Ha=r(F);_d=n(Ha,"When just running a Webpack build for the current project with "),Fn=l(Ha,"CODE",{});var xb=r(Fn);Pd=n(xb,"./node_modules/.bin/webpack --config webpack.config.js"),xb.forEach(t),Td=n(Ha,`, it will build a
`),qn=l(Ha,"CODE",{});var Sb=r(qn);xd=n(Sb,"dist"),Sb.forEach(t),Sd=n(Ha,` dir containing amongst others an index.html and a bundle.js. This is a standalone app, but this would not be a good workflow to
distribute a Polymer component because:`),Ha.forEach(t),Jl=u(e),Te=l(e,"UL",{});var ki=r(Te);na=l(ki,"LI",{});var Sy=r(na);jd=n(Sy,"the index.html is a complete HTML document, not just a "),Nn=l(Sy,"CODE",{});var jb=r(Nn);Ad=n(jb,"dom-module"),jb.forEach(t),Sy.forEach(t),Id=u(ki),Un=l(ki,"LI",{});var Ab=r(Un);Dd=n(Ab,"the bundle.js is one huge JavaScript blob that contains not only the compiled JavaScript for the component, but also all templates, TypeScript, Webpack and Polymer polyfills and libraries (like lodash in this case)"),Ab.forEach(t),ki.forEach(t),Fl=u(e),oa=l(e,"P",{});var Ib=r(oa);Cd=n(Ib,`The polyfills and libraries need to be kept separate, so that they can be loaded once per project instead of once for every component.
The bundle.js is already 2.8MB in size (unminified) / 347kB (minified).`),Ib.forEach(t),ql=u(e),xe=l(e,"P",{});var hi=r(xe);Ld=n(hi,"Would it be possible to make a Polymer component that uses the "),Yn=l(hi,"CODE",{});var Db=r(Yn);Md=n(Db,'<script src="foo.js">'),Db.forEach(t),Rd=n(hi,` style import and then do a “naive”
compilation from foo.ts to foo.js? Let’s first make a minimal example where the JavaScript is extracted from an Polymer
component:`),hi.forEach(t),Nl=u(e),q=l(e,"UL",{});var Wa=r(q);Q=l(Wa,"LI",{});var Ja=r(Q);Od=n(Ja,"Using "),Bn=l(Ja,"CODE",{});var Cb=r(Bn);Hd=n(Cb,"/polygram-details.html"),Cb.forEach(t),Wd=n(Ja," (this is the original, that the TypeScript+Webpack version in /src/ was based on) and "),zn=l(Ja,"CODE",{});var Lb=r(zn);Jd=n(Lb,"/demo/polygram-details"),Lb.forEach(t),Fd=n(Ja," (already importing /polygram-details)"),Ja.forEach(t),qd=u(Wa),Ut=l(Wa,"LI",{});var yi=r(Ut);Nd=n(yi,"Do not run webpack, but just "),Gn=l(yi,"CODE",{});var Mb=r(Gn);Ud=n(Mb,"polymer serve"),Mb.forEach(t),Yd=n(yi," and test the demo page"),yi.forEach(t),Bd=u(Wa),Z=l(Wa,"LI",{});var Fa=r(Z);zd=n(Fa,"Replace "),Vn=l(Fa,"CODE",{});var Rb=r(Vn);Gd=n(Rb,"<script>... code ...<\/script>"),Rb.forEach(t),Vd=n(Fa," by "),$n=l(Fa,"CODE",{});var Ob=r($n);$d=n(Ob,'<script src="polygram-details.js"><\/script>'),Ob.forEach(t),Xd=n(Fa,`, extract the JavaScript to
polygram-details.js and test the demo page again: this works.`),Fa.forEach(t),Wa.forEach(t),Ul=u(e),pa=l(e,"P",{});var Hb=r(pa);Kd=n(Hb,"Now to TypeScript:"),Hb.forEach(t),Yl=u(e),Se=l(e,"UL",{});var wi=r(Se);N=l(wi,"LI",{});var ws=r(N);Qd=n(ws,"Rename "),Xn=l(ws,"CODE",{});var Wb=r(Xn);Zd=n(Wb,"polygram-detail.js"),Wb.forEach(t),ef=n(ws," but leave the reference in "),Kn=l(ws,"CODE",{});var Jb=r(Kn);tf=n(Jb,"polygram-details.html"),Jb.forEach(t),sf=n(ws," to point to the JavaScript version: "),Qn=l(ws,"CODE",{});var Fb=r(Qn);af=n(Fb,'<script src="polygram-details.js"><\/script>'),Fb.forEach(t),ws.forEach(t),nf=u(wi),L=l(wi,"LI",{});var Ue=r(L);of=n(Ue,"The package "),Zn=l(Ue,"CODE",{});var qb=r(Zn);pf=n(qb,"typescript"),qb.forEach(t),lf=n(Ue," was already installed as a dependency, so use "),eo=l(Ue,"CODE",{});var Nb=r(eo);rf=n(Nb,"tsc"),Nb.forEach(t),cf=n(Ue,": "),to=l(Ue,"CODE",{});var Ub=r(to);uf=n(Ub,"./node_modules/.bin/tsc polygram-details.ts"),Ub.forEach(t),mf=n(Ue,`.
This gives errors, but does generate code. The resulting code does not run.`),Ue.forEach(t),wi.forEach(t),Bl=u(e),la=l(e,"P",{});var Yb=r(la);df=n(Yb,"The first errors are:"),Yb.forEach(t),zl=u(e),Yt=l(e,"PRE",{class:!0});var gE=r(Yt);gE.forEach(t),Gl=u(e),U=l(e,"P",{});var qa=r(U);ff=n(qa,"Adding "),so=l(qa,"CODE",{});var Bb=r(so);kf=n(Bb,"declare const Polymer: any;"),Bb.forEach(t),hf=n(qa," fixes these 4 errors. It tells TypeScript a global variable "),ao=l(qa,"CODE",{});var zb=r(ao);yf=n(zb,"Polymer"),zb.forEach(t),wf=n(qa," can be expected."),qa.forEach(t),Vl=u(e),ra=l(e,"P",{});var Gb=r(ra);bf=n(Gb,"This leaves the following errors:"),Gb.forEach(t),$l=u(e),Bt=l(e,"PRE",{class:!0});var _E=r(Bt);_E.forEach(t),Xl=u(e),Y=l(e,"P",{});var Na=r(Y);vf=n(Na,`The current compilation seems to ignore the tsconfig.json, because a similar error was solved earlier by
adding `),no=l(Na,"CODE",{});var Vb=r(no);Ef=n(Vb,'"target": "ESNext"'),Vb.forEach(t),gf=n(Na," in the config. The target can be specified with a flag: "),oo=l(Na,"CODE",{});var $b=r(oo);_f=n($b,"./node_modules/.bin/tsc --target ES6 polygram-details.ts"),$b.forEach(t),Pf=n(Na,`.
This runs without errors and works in the browser!`),Na.forEach(t),Kl=u(e),ia=l(e,"H3",{});var Xb=r(ia);Tf=n(Xb,"Simple compilation and Webpack"),Xb.forEach(t),Ql=u(e),ca=l(e,"P",{});var Kb=r(ca);xf=n(Kb,`This much simpler approach without Webpack seems to provide a more realistic workflow. Can we afford to leave Webpack
out entirely? Let’s reiterate its purpose:`),Kb.forEach(t),Zl=u(e),ua=l(e,"H4",{});var Qb=r(ua);Sf=n(Qb,"Webpack transpiles to ES5 with Babel"),Qb.forEach(t),er=u(e),ma=l(e,"P",{});var Zb=r(ma);jf=n(Zb,"As mentioned before we don’t need Babel for transpilation, the TypeScript compiler can be set to ES6 or ES5."),Zb.forEach(t),tr=u(e),da=l(e,"H4",{});var ev=r(da);Af=n(ev,"Webpack provides a development server with hot module reloading"),ev.forEach(t),sr=u(e),fa=l(e,"P",{});var tv=r(fa);If=n(tv,"Hot Module Replacement is mainly to ease development, but we can use livereload combined with polyserve instead which would be acceptable for this use case."),tv.forEach(t),ar=u(e),ka=l(e,"H4",{});var sv=r(ka);Df=n(sv,"Webpack handles module bundling"),sv.forEach(t),nr=u(e),ha=l(e,"P",{});var av=r(ha);Cf=n(av,`We can do without ES6 modules or packaging other resources like images as JavaScript modules, because we already have to
deal with Polymer Elements as a component platform. We have to distribute the end result as Polymer Elements to be able to add it to the catalog.`),av.forEach(t),or=u(e),ya=l(e,"P",{});var nv=r(ya);Lf=n(nv,"Although Polymer 3 will use ES6 modules, a tool is supposed to become available that can migrate from elements from Polymer 2 to Polymer 3 syntax."),nv.forEach(t),pr=u(e),wa=l(e,"P",{});var ov=r(wa);Mf=n(ov,"Without Webpack we lose the module polyfill that is injected per file, which potentially saves a significant size overhead, whilst staying closer to the concept of Polymer Element development."),ov.forEach(t),lr=u(e),f=l(e,"P",{});var C=r(f);Rf=n(C,"Global JavaScript variables from external modules can be made accessible with the "),po=l(C,"CODE",{});var pv=r(po);Of=n(pv,"declare"),pv.forEach(t),Hf=n(C,` placeholder, and it is still
possible to use `),lo=l(C,"CODE",{});var lv=r(lo);Wf=n(lv,"import"),lv.forEach(t),Jf=n(C," to import from "),ro=l(C,"CODE",{});var rv=r(ro);Ff=n(rv,"node_modules"),rv.forEach(t),qf=n(C,`.
However, when module is set to `),io=l(C,"CODE",{});var iv=r(io);Nf=n(iv,"none"),iv.forEach(t),Uf=n(C,` in the tsconfig.json, the variable will just be put onto the “global” scope. This is
not the `),co=l(C,"EM",{});var cv=r(co);Yf=n(cv,"true"),cv.forEach(t),Bf=n(C,` global scope, because it is still contained within the Polymer element, so the variable will be on the Polymer
Element scope, and should not leak to the actual global scope.`),C.forEach(t),rr=u(e),zt=l(e,"P",{});var jy=r(zt);uo=l(jy,"CODE",{});var uv=r(uo);zf=n(uv,"Import"),uv.forEach(t),Gf=n(jy,` should still be used with caution: it will lead to code duplication if 2 Polymer+TypeScript elements import the
same dependency. In that case it would be better to import that dependency via HTML import because the Polymer compiler can deduplicate it.`),jy.forEach(t),ir=u(e),je=l(e,"P",{});var bi=r(je);Vf=n(bi,`Webpack can also be used to package CSS as modules, but for encapsulating CSS in Polymer the
`),Gt=l(bi,"A",{href:!0,rel:!0});var mv=r(Gt);$f=n(mv,"Shadow DOM"),mv.forEach(t),Xf=n(bi,` can be used. This is actually an
aspect of web components that is very well executed.`),bi.forEach(t),cr=u(e),ba=l(e,"H3",{});var dv=r(ba);Kf=n(dv,"Automatic compilation"),dv.forEach(t),ur=u(e),B=l(e,"P",{});var Ua=r(B);Qf=n(Ua,`Without Webpack, it is unpractical that for every change to a TypeScript file a manual transformation is needed. Following
the example in the previous section, each time `),mo=l(Ua,"CODE",{});var fv=r(mo);Zf=n(fv,"polygram-details.ts"),fv.forEach(t),ek=n(Ua," changes, "),fo=l(Ua,"CODE",{});var kv=r(fo);tk=n(kv,"./node_modules/.bin/tsc --target ES6 polygram-details.ts"),kv.forEach(t),sk=n(Ua,`
must be run. Let’s try to automate this without using Webpack.`),Ua.forEach(t),mr=u(e),va=l(e,"H4",{});var hv=r(va);ak=n(hv,"With tsc"),hv.forEach(t),dr=u(e),Ae=l(e,"P",{});var vi=r(Ae);nk=n(vi,"First I make a new tsconfig named "),ko=l(vi,"CODE",{});var yv=r(ko);ok=n(yv,"tsconfig.inline.json"),yv.forEach(t),pk=n(vi," for this use case:"),vi.forEach(t),fr=u(e),Vt=l(e,"PRE",{class:!0});var PE=r(Vt);PE.forEach(t),kr=u(e),z=l(e,"P",{});var Ya=r(z);lk=n(Ya,"To compile run "),ho=l(Ya,"CODE",{});var wv=r(ho);rk=n(wv,"./node_modules/.bin/tsc -w -p tsconfig.inline.json"),wv.forEach(t),ik=n(Ya,". The "),yo=l(Ya,"CODE",{});var bv=r(yo);ck=n(bv,"-w"),bv.forEach(t),uk=n(Ya,` flag keeps the process running and watches for
changes in the included TypeScript files.`),Ya.forEach(t),hr=u(e),h=l(e,"P",{});var $=r(h);mk=n($,"An interesting side-effect occurs. Naturally, each TypeScript file is going to need the "),wo=l($,"CODE",{});var vv=r(wo);dk=n(vv,"declare const Polymer: any;"),vv.forEach(t),fk=n($,`
declaration as a workaround for the fact that the Polymer dependency can’t be imported (see previous sections). But
because we now use `),bo=l($,"CODE",{});var Ev=r(bo);kk=n(Ev,"-p"),Ev.forEach(t),hk=n($,`, the project flag, the compiler expects all files share global scope. And the second file
using `),vo=l($,"CODE",{});var gv=r(vo);yk=n(gv,"declare const Polymer: any;"),gv.forEach(t),wk=n($," will get an error: "),Eo=l($,"CODE",{});var _v=r(Eo);bk=n(_v,"Cannot redeclare block-scoped variable 'Polymer'"),_v.forEach(t),vk=n($,`. How can we use
the project flag, without letting the compiler share the global scope between all TypeScript files?`),$.forEach(t),yr=u(e),Ea=l(e,"P",{});var Pv=r(Ea);Ek=n(Pv,`A workaround would be to create a TypeScript file that just imports/declares all the expected global variables once.
This would make the code less transparent at best and it might even create other scoping issues.`),Pv.forEach(t),wr=u(e),ga=l(e,"H3",{});var Tv=r(ga);gk=n(Tv,"Custom compilation"),Tv.forEach(t),br=u(e),Ie=l(e,"P",{});var Ei=r(Ie);_k=n(Ei,"As an alternative let’s try to run compilation with an isolated scope for each TypeScript file. "),$t=l(Ei,"A",{href:!0,rel:!0});var xv=r($t);Pk=n(xv,"This issue"),xv.forEach(t),Tk=n(Ei,`
explains that this would be possible by supplying a tsconfig.json for each scope. That would be doable for a limited set
of scopes that is static over time (e.g. a back-end codebase and a front-end codebase in the same project).
However, it makes no sense from a maintenance standpoint for the current project as it would need a tsconfig.json
for each Polymer element.`),Ei.forEach(t),vr=u(e),_a=l(e,"P",{});var Sv=r(_a);xk=n(Sv,"To be complete, I did try this out. First, set up a base tsconfig that can be inherited:"),Sv.forEach(t),Er=u(e),Xt=l(e,"PRE",{class:!0});var TE=r(Xt);TE.forEach(t),gr=u(e),Pa=l(e,"P",{});var jv=r(Pa);Sk=n(jv,"Now for each Polymer TypeScript file a tsconfig, e.g.:"),jv.forEach(t),_r=u(e),Kt=l(e,"PRE",{class:!0});var xE=r(Kt);xE.forEach(t),Pr=u(e),G=l(e,"P",{});var Ba=r(G);jk=n(Ba,"It is now possible to compile/watch polygram-details.ts with "),go=l(Ba,"CODE",{});var Av=r(go);Ak=n(Av,"tsc -w -p polygram-details.tsconfig.json"),Av.forEach(t),Ik=n(Ba,`, but it is
still not possible to compile/watch multiple tsconfigs at `),_o=l(Ba,"EM",{});var Iv=r(_o);Dk=n(Iv,"the same time"),Iv.forEach(t),Ck=n(Ba,"."),Ba.forEach(t),Tr=u(e),y=l(e,"P",{});var X=r(y);Lk=n(X,"In this case it would be better to forget about the watch flag "),Po=l(X,"CODE",{});var Dv=r(Po);Mk=n(Dv,"-w"),Dv.forEach(t),Rk=n(X," altogether and just use "),To=l(X,"CODE",{});var Cv=r(To);Ok=n(Cv,"npm watch"),Cv.forEach(t),Hk=n(X,` combined with
`),xo=l(X,"CODE",{});var Lv=r(xo);Wk=n(Lv,"tsc [changedfile]"),Lv.forEach(t),Jk=n(X,`. You can’t use a tsconfig.json combined with an input file path for tsc, so all options must be
supplied as flags: `),So=l(X,"CODE",{});var Mv=r(So);Fk=n(Mv,"tsc --target ES6 --sourceMap [changedFile]"),Mv.forEach(t),qk=n(X,"."),X.forEach(t),xr=u(e),x=l(e,"P",{});var Ye=r(x);Nk=n(Ye,"I tried combining this compilation one-liner with a watch script, but I could not get this to work with "),Qt=l(Ye,"A",{href:!0,rel:!0});var Rv=r(Qt);Uk=n(Rv,"nodemon"),Rv.forEach(t),Yk=n(Ye,`,
`),Zt=l(Ye,"A",{href:!0,rel:!0});var Ov=r(Zt);Bk=n(Ov,"npm-watch"),Ov.forEach(t),zk=n(Ye," or "),es=l(Ye,"A",{href:!0,rel:!0});var Hv=r(es);Gk=n(Hv,"watch"),Hv.forEach(t),Vk=n(Ye,", so I wrote a small script:"),Ye.forEach(t),Sr=u(e),ts=l(e,"PRE",{class:!0});var SE=r(ts);SE.forEach(t),jr=u(e),Ta=l(e,"P",{});var Wv=r(Ta);$k=n(Wv,"Now it is possible to watch each TypeScript file and compile it with its scope isolated from the other TypeScript files."),Wv.forEach(t),Ar=u(e),xa=l(e,"H2",{});var Jv=r(xa);Xk=n(Jv,"twc"),Jv.forEach(t),Ir=u(e),S=l(e,"P",{});var Be=r(S);Kk=n(Be,"With "),jo=l(Be,"CODE",{});var Fv=r(jo);Qk=n(Fv,"ts-poly-watch.js"),Fv.forEach(t),Zk=n(Be,` it looks like we finally have an acceptable working environment. I have extracted the script to
its own project `),ss=l(Be,"A",{href:!0,rel:!0});var qv=r(ss);eh=n(qv,"typescript-batch-compiler"),qv.forEach(t),th=n(Be," and "),as=l(Be,"A",{href:!0,rel:!0});var Nv=r(as);sh=n(Nv,"npm package"),Nv.forEach(t),ah=n(Be,` because
there is much room for improvement and it will be easier to use in other projects if it is an npm package.`),Be.forEach(t),Dr=u(e),j=l(e,"P",{});var ze=r(j);nh=n(ze,"So are we now done? In fact there is one more thing I want to explore. During the research I ran into "),ns=l(ze,"A",{href:!0,rel:!0});var Uv=r(ns);oh=n(Uv,"twc"),Uv.forEach(t),ph=n(ze,`.
This is a compiler for `),Ao=l(ze,"EM",{});var Yv=r(Ao);lh=n(Yv,"TypeScript Web Components"),Yv.forEach(t),rh=n(ze,` and can be used to compile TypeScript classes to Polymer 2 elements.
Although this sounds like it is similar to my `),Io=l(ze,"CODE",{});var Bv=r(Io);ih=n(Bv,"typescript-batch-compiler"),Bv.forEach(t),ch=n(ze,", here are some preliminary findings:"),ze.forEach(t),Cr=u(e),De=l(e,"OL",{});var gi=r(De);os=l(gi,"LI",{});var _i=r(os);uh=n(_i,`It assumes a TypeScript file as the entrypoint: in my setup I still stay close to the Polymer setup with a
Polymer element (so HTML) that includes a script file. With `),Do=l(_i,"CODE",{});var zv=r(Do);mh=n(zv,"twc"),zv.forEach(t),dh=n(_i,` the entrypoint is a TypeScript file that imports an HTML template.
A great advantage is that this is more like Polymer 3 and also similar to other component driven frameworks
like React, Vue and Angular. The disadvantage is of course that the style will be foreign to other Polymer developers.`),_i.forEach(t),fh=u(gi),ee=l(gi,"LI",{});var za=r(ee);kh=n(za,`It’s still very experimental. There is no example in the repo or an explanation of how to set up a basic element in the
README, but a general approach is outlined `),ps=l(za,"A",{href:!0,rel:!0});var Gv=r(ps);hh=n(Gv,"on the project wiki"),Gv.forEach(t),yh=n(za,`
and examples of twc in a project can be found in `),ls=l(za,"A",{href:!0,rel:!0});var Vv=r(ls);wh=n(Vv,"this generator project"),Vv.forEach(t),bh=n(za,"."),za.forEach(t),gi.forEach(t),Lr=u(e),Sa=l(e,"P",{});var $v=r(Sa);vh=n($v,"With the aforementioned wiki, I take these steps:"),$v.forEach(t),Mr=u(e),Ce=l(e,"UL",{});var Pi=r(Ce);rs=l(Pi,"LI",{});var Ti=r(rs);Eh=n(Ti,"Run "),Co=l(Ti,"CODE",{});var Xv=r(Co);gh=n(Xv,"twc"),Xv.forEach(t),_h=n(Ti," in a new subdir of the project appropriately named “twc”"),Ti.forEach(t),Ph=u(Pi),Lo=l(Pi,"LI",{});var Kv=r(Lo);Th=n(Kv,"Set up a very basic polygram-twc.ts conforming to the style as outlined in the wiki:"),Kv.forEach(t),Pi.forEach(t),Rr=u(e),is=l(e,"PRE",{class:!0});var jE=r(is);jE.forEach(t),Or=u(e),A=l(e,"UL",{});var Ge=r(A);M=l(Ge,"LI",{});var Ve=r(M);xh=n(Ve,"Run "),Mo=l(Ve,"CODE",{});var Qv=r(Mo);Sh=n(Qv,"tsc --init"),Qv.forEach(t),jh=n(Ve,` to create a new tsconfig.json in the twc dir. This turns out to be important. When I re-use my existing
tsconfig.json the build fails with `),Ro=l(Ve,"CODE",{});var Zv=r(Ro);Ah=n(Zv,"Error: Debug Failure."),Zv.forEach(t),Ih=n(Ve,". This seems to be caused by the line "),Oo=l(Ve,"CODE",{});var e2=r(Oo);Dh=n(e2,'"moduleResolution": "node"'),e2.forEach(t),Ch=n(Ve,`,
which is not needed for this compilation.`),Ve.forEach(t),Lh=u(Ge),cs=l(Ge,"LI",{});var xi=r(cs);Mh=n(xi,"Add "),Ho=l(xi,"CODE",{});var t2=r(Ho);Rh=n(t2,"node_modules/twc/types/polymer.decorators.d.ts"),t2.forEach(t),Oh=n(xi," to the include section of the tsconfig.json, to resolve certain types."),xi.forEach(t),Hh=u(Ge),us=l(Ge,"LI",{});var Si=r(us);Wh=n(Si,"Build in the twc dir by running "),Wo=l(Si,"CODE",{});var s2=r(Wo);Jh=n(s2,"../node_modules/.bin/twc polygram-twc.ts"),s2.forEach(t),Fh=n(Si,"."),Si.forEach(t),qh=u(Ge),Jo=l(Ge,"LI",{});var a2=r(Jo);Nh=n(a2,"A polygram-twc.html is created."),a2.forEach(t),Ge.forEach(t),Hr=u(e),Le=l(e,"P",{});var ji=r(Le);Uh=n(ji,`I also converted the original polygram-details.html (the one with embedded JavaScript) to this format. See the result
in `),ms=l(ji,"A",{href:!0,rel:!0});var n2=r(ms);Yh=n(n2,"the repo for this experiment"),n2.forEach(t),Bh=n(ji,`. When working on this
conversion, some differences with normal web components become apparent:`),ji.forEach(t),Wr=u(e),I=l(e,"UL",{});var $e=r(I);ja=l($e,"LI",{});var Ay=r(ja);zh=n(Ay,"twc auto-injects the registration of the component: "),Fo=l(Ay,"CODE",{});var o2=r(Fo);Gh=n(o2,"customElements.define(PolygramDetails.is, PolygramDetails);"),o2.forEach(t),Ay.forEach(t),Vh=u($e),ds=l($e,"LI",{});var Ai=r(ds);qo=l(Ai,"CODE",{});var p2=r(qo);$h=n(p2,"import './polygram-ui-details';"),p2.forEach(t),Xh=n(Ai," is converted to "),No=l(Ai,"CODE",{});var l2=r(No);Kh=n(l2,'<link rel="import" href="./polygram-ui-details.html">'),l2.forEach(t),Ai.forEach(t),Qh=u($e),te=l($e,"LI",{});var Ga=r(te);Zh=n(Ga,"the "),Uo=l(Ga,"CODE",{});var r2=r(Uo);ey=n(r2,"is"),r2.forEach(t),ty=n(Ga," getter, i.e. this: "),Yo=l(Ga,"CODE",{});var i2=r(Yo);sy=n(i2,"static get is() { return 'polygram-details'; }"),i2.forEach(t),ay=n(Ga,`
is auto generated from the class name.`),Ga.forEach(t),ny=u($e),Bo=l($e,"LI",{});var c2=r(Bo);oy=n(c2,"The JSDoc is converted to an HTML comment."),c2.forEach(t),$e.forEach(t),Jr=u(e),Me=l(e,"P",{});var Ii=r(Me);py=n(Ii,`This syntax uses plain ES modules and is therefore also closer to Polymer 3. Still there are some differences.
Compare the code for polygram-twc.ts but in `),fs=l(Ii,"A",{href:!0,rel:!0});var u2=r(fs);ly=n(u2,"Polymer 3 syntax"),u2.forEach(t),ry=n(Ii,":"),Ii.forEach(t),Fr=u(e),ks=l(e,"PRE",{class:!0});var AE=r(ks);AE.forEach(t),qr=u(e),Aa=l(e,"P",{});var m2=r(Aa);iy=n(m2,`Although I can’t find any sources, I heard that Polymer 3 would supply an auto converter from (normal) Polymer 2 syntax.
You could use that converter on the output of twc, so this should not be a reason to avoid twc.`),m2.forEach(t),Nr=u(e),Ia=l(e,"H2",{});var d2=r(Ia);cy=n(d2,"Final remarks"),d2.forEach(t),Ur=u(e),Re=l(e,"P",{});var Di=r(Re);uy=n(Di,`Unit testing and coverage support when using TypeScript has not been mentioned, but I hope it is clear that it is
unchanged from a normal Polymer 2 application when using typescript-batch-compiler. You can just use
`),hs=l(Di,"A",{href:!0,rel:!0});var f2=r(hs);my=n(f2,"WCT"),f2.forEach(t),dy=n(Di,`), because all components
are compiled to a state that conforms to a non-TypeScript Polymer 2 situation.`),Di.forEach(t),Yr=u(e),D=l(e,"P",{});var Xe=r(D);fy=n(Xe,"For the Webpack approach it would be an improvement to see why "),zo=l(Xe,"CODE",{});var k2=r(zo);ky=n(k2,"polymer-webpack-loader"),k2.forEach(t),hy=n(Xe,` is not importing Polymer when
using `),Go=l(Xe,"CODE",{});var h2=r(Go);yy=n(h2,"import Polymer from '../bower_components/polymer/polymer-element.html'"),h2.forEach(t),wy=n(Xe,`
or `),Vo=l(Xe,"CODE",{});var y2=r(Vo);by=n(y2,"import '../bower_components/polymer/polymer-element.html'"),y2.forEach(t),vy=n(Xe,"."),Xe.forEach(t),Br=u(e),Oe=l(e,"P",{});var Ci=r(Oe);Ey=n(Ci,"It could also be an improvement to add the "),ys=l(Ci,"A",{href:!0,rel:!0});var w2=r(ys);gy=n(w2,"prettier"),w2.forEach(t),_y=n(Ci,` plugin to promote a
consistent coding style. This could be added to TSLint via Webpack, but could also be integrated in the
typescript-batch-compiler package.`),Ci.forEach(t),this.h()},h(){m(bs,"href","../polymer2-redux/"),m(Ke,"href","https://caniuse.com/#search=html%20imports"),m(Ke,"rel","nofollow"),m(Qe,"href","https://github.com/code-star/scala-ts-interfaces"),m(Qe,"rel","nofollow"),m(Ze,"href","https://github.com/mdvanes/polymer3-typescript"),m(Ze,"rel","nofollow"),m(et,"href","https://github.com/pferretti"),m(et,"rel","nofollow"),m(tt,"href","https://www.webcomponents.org/"),m(tt,"rel","nofollow"),m(st,"href","https://github.com/mdvanes/typescript-batch-compiler"),m(st,"rel","nofollow"),m(at,"href","https://github.com/Draccoz/twc"),m(at,"rel","nofollow"),m(nt,"href","https://github.com/mdvanes/polygram/tree/TypeScript"),m(nt,"rel","nofollow"),m(ot,"href","https://www.youtube.com/playlist?list=PLOU2XLYxmsII5c3Mgw6fNYCzaWrsM3sMN"),m(ot,"rel","nofollow"),m(pt,"href","http://robdodson.me/how-to-use-polymer-with-webpack/"),m(pt,"rel","nofollow"),m(lt,"href","https://github.com/webpack-contrib/polymer-webpack-loader"),m(lt,"rel","nofollow"),m(rt,"href","https://github.com/mdvanes/polygram/tree/TypeScript"),m(rt,"rel","nofollow"),m(it,"href","https://www.polymer-project.org/2.0/toolbox/prpl"),m(it,"rel","nofollow"),m(ct,"href","https://github.com/TypeStrong/ts-loader"),m(ct,"rel","nofollow"),m(ut,"class","language-javascript"),m(mt,"class","language-javascript"),m(dt,"class","language-javascript"),m(ft,"class","language-javascript"),m(kt,"class","language-undefined"),m(ht,"href","https://github.com/webpack-contrib/polymer-webpack-loader/issues/64"),m(ht,"rel","nofollow"),m(yt,"class","language-html"),m(wt,"class","language-typescript"),m(bt,"class","language-html"),m(vt,"class","language-html"),m(Et,"class","language-javascript"),m(gt,"class","language-javascript"),m(_t,"class","language-html"),m(Pt,"class","language-typescript"),m(Tt,"class","language-typescript"),m(xt,"class","language-typescript"),m(St,"class","language-typescript"),m(jt,"class","language-typescript"),m(At,"href","https://github.com/ianwalter/debug-loader"),m(At,"rel","nofollow"),m(It,"class","language-typescript"),m(Dt,"class","language-typescript"),m(Ct,"href","https://github.com/Polymer/polymer-linter"),m(Ct,"rel","nofollow"),m(Lt,"href","https://github.com/Polymer/polymer-linter#use-with-other-tools"),m(Lt,"rel","nofollow"),m(Mt,"class","language-javascript"),m(Ot,"href","https://medium.com/google-developers/exploring-es7-decorators-76ecb65fb841"),m(Ot,"rel","nofollow"),m(Ht,"class","language-typescript"),m(Wt,"href","https://medium.com/google-developers/exploring-es7-decorators-76ecb65fb841"),m(Wt,"rel","nofollow"),m(Jt,"class","language-typescript"),m(Ft,"class","language-typescript"),m(qt,"class","language-undefined"),m(Nt,"href","https://github.com/PolymerElements/iron-component-page"),m(Nt,"rel","nofollow"),m(Yt,"class","language-undefined"),m(Bt,"class","language-undefined"),m(Gt,"href","https://developer.mozilla.org/en-US/docs/Web/Web_Components/Shadow_DOM"),m(Gt,"rel","nofollow"),m(Vt,"class","language-json"),m($t,"href","https://github.com/Microsoft/TypeScript/issues/1516"),m($t,"rel","nofollow"),m(Xt,"class","language-json"),m(Kt,"class","language-json"),m(Qt,"href","https://www.npmjs.com/package/nodemon"),m(Qt,"rel","nofollow"),m(Zt,"href","https://www.npmjs.com/package/npm-watch"),m(Zt,"rel","nofollow"),m(es,"href","https://www.npmjs.com/package/watch"),m(es,"rel","nofollow"),m(ts,"class","language-javascript"),m(ss,"href","https://github.com/mdvanes/typescript-batch-compiler"),m(ss,"rel","nofollow"),m(as,"href","https://www.npmjs.com/package/typescript-batch-compiler"),m(as,"rel","nofollow"),m(ns,"href","https://github.com/Draccoz/twc"),m(ns,"rel","nofollow"),m(ps,"href","https://github.com/Draccoz/twc/wiki/Creating-a-simple-component"),m(ps,"rel","nofollow"),m(ls,"href","https://github.com/mlisook/generator-polymer-init-twc-starter-kit"),m(ls,"rel","nofollow"),m(is,"class","language-typescript"),m(ms,"href","https://github.com/mdvanes/polygram/tree/TypeScript/twc"),m(ms,"rel","nofollow"),m(fs,"href","https://www.polymer-project.org/blog/2017-08-23-hands-on-30-preview"),m(fs,"rel","nofollow"),m(ks,"class","language-typescript"),m(hs,"href","https://github.com/Polymer/web-component-tester"),m(hs,"rel","nofollow"),m(ys,"href","https://www.npmjs.com/package/tslint-plugin-prettier"),m(ys,"rel","nofollow")},m(e,o){i(e,b,o),s(b,Li),s(b,bs),s(bs,Mi),s(b,Ri),s(b,Ke),s(Ke,Oi),s(b,Hi),i(e,$o,o),i(e,v,o),s(v,Wi),s(v,Qe),s(Qe,Ji),s(v,Fi),s(v,Ze),s(Ze,qi),s(v,Ni),s(v,et),s(et,Ui),s(v,Yi),i(e,Xo,o),i(e,se,o),s(se,Bi),s(se,tt),s(tt,zi),s(se,Gi),i(e,Ko,o),i(e,vs,o),s(vs,K),s(K,Vi),s(K,st),s(st,$i),s(K,Xi),s(K,at),s(at,Ki),s(K,Qi),i(e,Qo,o),i(e,Es,o),s(Es,Zi),i(e,Zo,o),i(e,ae,o),s(ae,ec),s(ae,nt),s(nt,tc),s(ae,sc),i(e,ep,o),i(e,k,o),s(k,ac),s(k,ot),s(ot,nc),s(k,oc),s(k,pt),s(pt,pc),s(k,lc),s(k,lt),s(lt,rc),s(k,ic),s(k,rt),s(rt,cc),s(k,uc),i(e,tp,o),i(e,E,o),s(E,mc),s(E,Va),s(Va,dc),s(E,fc),s(E,$a),s($a,kc),s(E,hc),s(E,Xa),s(Xa,yc),s(E,wc),i(e,sp,o),i(e,g,o),s(g,bc),s(g,Ka),s(Ka,vc),s(g,Ec),s(g,Qa),s(Qa,gc),s(g,_c),s(g,Za),s(Za,Pc),s(g,Tc),i(e,ap,o),i(e,ne,o),s(ne,xc),s(ne,it),s(it,Sc),s(ne,jc),i(e,np,o),i(e,gs,o),s(gs,Ac),i(e,op,o),i(e,oe,o),s(oe,Ic),s(oe,ct),s(ct,Dc),s(oe,Cc),i(e,pp,o),i(e,_s,o),s(_s,Lc),i(e,lp,o),i(e,ut,o),ut.innerHTML=v2,i(e,rp,o),i(e,Ps,o),s(Ps,Mc),i(e,ip,o),i(e,mt,o),mt.innerHTML=E2,i(e,cp,o),i(e,Ts,o),s(Ts,Rc),i(e,up,o),i(e,dt,o),dt.innerHTML=g2,i(e,mp,o),i(e,xs,o),s(xs,Oc),i(e,dp,o),i(e,Ss,o),s(Ss,Hc),i(e,fp,o),i(e,ft,o),ft.innerHTML=_2,i(e,kp,o),i(e,js,o),s(js,Wc),i(e,hp,o),i(e,kt,o),kt.innerHTML=P2,i(e,yp,o),i(e,pe,o),s(pe,Jc),s(pe,ht),s(ht,Fc),s(pe,qc),i(e,wp,o),i(e,As,o),s(As,Nc),i(e,bp,o),i(e,Is,o),s(Is,Uc),i(e,vp,o),i(e,le,o),s(le,Yc),s(le,en),s(en,Bc),s(le,zc),i(e,Ep,o),i(e,re,o),s(re,Gc),s(re,tn),s(tn,Vc),s(re,$c),i(e,gp,o),i(e,yt,o),yt.innerHTML=T2,i(e,_p,o),i(e,ie,o),s(ie,Xc),s(ie,sn),s(sn,Kc),s(ie,Qc),i(e,Pp,o),i(e,wt,o),wt.innerHTML=x2,i(e,Tp,o),i(e,ce,o),s(ce,Zc),s(ce,an),s(an,eu),s(ce,tu),i(e,xp,o),i(e,bt,o),bt.innerHTML=S2,i(e,Sp,o),i(e,Ds,o),s(Ds,su),i(e,jp,o),i(e,Cs,o),s(Cs,au),i(e,Ap,o),i(e,_,o),s(_,nu),s(_,nn),s(nn,ou),s(_,pu),s(_,on),s(on,lu),s(_,ru),s(_,pn),s(pn,iu),s(_,cu),i(e,Ip,o),i(e,ue,o),s(ue,uu),s(ue,ln),s(ln,mu),s(ue,du),i(e,Dp,o),i(e,Ls,o),s(Ls,fu),i(e,Cp,o),i(e,d,o),s(d,rn),s(rn,ku),s(d,hu),s(d,cn),s(cn,yu),s(d,wu),s(d,un),s(un,bu),s(d,vu),s(d,mn),s(mn,Eu),s(d,gu),s(d,dn),s(dn,_u),s(d,Pu),s(d,fn),s(fn,Tu),s(d,xu),i(e,Lp,o),i(e,R,o),s(R,Su),s(R,kn),s(kn,ju),s(R,Au),s(R,hn),s(hn,Iu),s(R,Du),i(e,Mp,o),i(e,Ms,o),s(Ms,Cu),i(e,Rp,o),i(e,Rs,o),s(Rs,Lu),i(e,Op,o),i(e,vt,o),vt.innerHTML=j2,i(e,Hp,o),i(e,me,o),s(me,Mu),s(me,yn),s(yn,Ru),s(me,Ou),i(e,Wp,o),i(e,de,o),s(de,Os),s(Os,Hu),s(Os,wn),s(wn,Wu),s(de,Ju),s(de,Hs),s(Hs,Fu),s(Hs,bn),s(bn,qu),i(e,Jp,o),i(e,fe,o),s(fe,Nu),s(fe,vn),s(vn,Uu),s(fe,Yu),i(e,Fp,o),i(e,Ws,o),s(Ws,Bu),i(e,qp,o),i(e,Et,o),Et.innerHTML=A2,i(e,Np,o),i(e,Js,o),s(Js,zu),i(e,Up,o),i(e,gt,o),gt.innerHTML=I2,i(e,Yp,o),i(e,ke,o),s(ke,Gu),s(ke,En),s(En,Vu),s(ke,$u),i(e,Bp,o),i(e,Fs,o),s(Fs,Xu),i(e,zp,o),i(e,qs,o),s(qs,Ku),i(e,Gp,o),i(e,he,o),s(he,Qu),s(he,gn),s(gn,Zu),s(he,em),i(e,Vp,o),i(e,Ns,o),s(Ns,tm),i(e,$p,o),i(e,_t,o),_t.innerHTML=D2,i(e,Xp,o),i(e,Pt,o),Pt.innerHTML=C2,i(e,Kp,o),i(e,Us,o),s(Us,sm),i(e,Qp,o),i(e,O,o),s(O,am),s(O,_n),s(_n,nm),s(O,om),s(O,Pn),s(Pn,pm),s(O,lm),i(e,Zp,o),i(e,Ys,o),s(Ys,rm),i(e,el,o),i(e,P,o),s(P,im),s(P,Tn),s(Tn,cm),s(P,um),s(P,xn),s(xn,mm),s(P,dm),s(P,Sn),s(Sn,fm),s(P,km),i(e,tl,o),i(e,ye,o),s(ye,hm),s(ye,jn),s(jn,ym),s(ye,wm),i(e,sl,o),i(e,Tt,o),Tt.innerHTML=L2,i(e,al,o),i(e,Bs,o),s(Bs,bm),i(e,nl,o),i(e,xt,o),xt.innerHTML=M2,i(e,ol,o),i(e,zs,o),s(zs,vm),i(e,pl,o),i(e,Gs,o),s(Gs,Em),i(e,ll,o),i(e,we,o),s(we,gm),s(we,An),s(An,_m),s(we,Pm),i(e,rl,o),i(e,Vs,o),s(Vs,Tm),i(e,il,o),i(e,St,o),St.innerHTML=R2,i(e,cl,o),i(e,be,o),s(be,xm),s(be,In),s(In,Sm),s(be,jm),i(e,ul,o),i(e,jt,o),jt.innerHTML=O2,i(e,ml,o),i(e,ve,o),s(ve,Am),s(ve,At),s(At,Im),s(ve,Dm),i(e,dl,o),i(e,It,o),It.innerHTML=H2,i(e,fl,o),i(e,T,o),s(T,Cm),s(T,Dn),s(Dn,Lm),s(T,Mm),s(T,Cn),s(Cn,Rm),s(T,Om),s(T,Ln),s(Ln,Hm),s(T,Wm),i(e,kl,o),i(e,$s,o),s($s,Jm),i(e,hl,o),i(e,Dt,o),Dt.innerHTML=W2,i(e,yl,o),i(e,Xs,o),s(Xs,Fm),i(e,wl,o),i(e,H,o),s(H,qm),s(H,Ct),s(Ct,Nm),s(H,Um),s(H,Lt),s(Lt,Ym),s(H,Bm),i(e,bl,o),i(e,Ks,o),s(Ks,zm),i(e,vl,o),i(e,Mt,o),Mt.innerHTML=J2,i(e,El,o),i(e,Qs,o),s(Qs,Gm),i(e,gl,o),i(e,Rt,o),s(Rt,Vm),s(Rt,Mn),s(Mn,$m),i(e,_l,o),i(e,Ee,o),s(Ee,Xm),s(Ee,Rn),s(Rn,Km),s(Ee,Qm),i(e,Pl,o),i(e,Zs,o),s(Zs,Zm),i(e,Tl,o),i(e,W,o),s(W,ed),s(W,Ot),s(Ot,td),s(W,sd),s(W,On),s(On,ad),s(W,nd),i(e,xl,o),i(e,Ht,o),Ht.innerHTML=F2,i(e,Sl,o),i(e,ge,o),s(ge,od),s(ge,Wt),s(Wt,pd),s(ge,ld),i(e,jl,o),i(e,Jt,o),Jt.innerHTML=q2,i(e,Al,o),i(e,ea,o),s(ea,rd),i(e,Il,o),i(e,Ft,o),Ft.innerHTML=N2,i(e,Dl,o),i(e,ta,o),s(ta,id),i(e,Cl,o),i(e,qt,o),qt.innerHTML=U2,i(e,Ll,o),i(e,J,o),s(J,cd),s(J,Hn),s(Hn,ud),s(J,md),s(J,Wn),s(Wn,dd),s(J,fd),i(e,Ml,o),i(e,sa,o),s(sa,kd),i(e,Rl,o),i(e,aa,o),s(aa,hd),i(e,Ol,o),i(e,_e,o),s(_e,yd),s(_e,Nt),s(Nt,wd),s(_e,bd),i(e,Hl,o),i(e,Pe,o),s(Pe,vd),s(Pe,Jn),s(Jn,Ed),s(Pe,gd),i(e,Wl,o),i(e,F,o),s(F,_d),s(F,Fn),s(Fn,Pd),s(F,Td),s(F,qn),s(qn,xd),s(F,Sd),i(e,Jl,o),i(e,Te,o),s(Te,na),s(na,jd),s(na,Nn),s(Nn,Ad),s(Te,Id),s(Te,Un),s(Un,Dd),i(e,Fl,o),i(e,oa,o),s(oa,Cd),i(e,ql,o),i(e,xe,o),s(xe,Ld),s(xe,Yn),s(Yn,Md),s(xe,Rd),i(e,Nl,o),i(e,q,o),s(q,Q),s(Q,Od),s(Q,Bn),s(Bn,Hd),s(Q,Wd),s(Q,zn),s(zn,Jd),s(Q,Fd),s(q,qd),s(q,Ut),s(Ut,Nd),s(Ut,Gn),s(Gn,Ud),s(Ut,Yd),s(q,Bd),s(q,Z),s(Z,zd),s(Z,Vn),s(Vn,Gd),s(Z,Vd),s(Z,$n),s($n,$d),s(Z,Xd),i(e,Ul,o),i(e,pa,o),s(pa,Kd),i(e,Yl,o),i(e,Se,o),s(Se,N),s(N,Qd),s(N,Xn),s(Xn,Zd),s(N,ef),s(N,Kn),s(Kn,tf),s(N,sf),s(N,Qn),s(Qn,af),s(Se,nf),s(Se,L),s(L,of),s(L,Zn),s(Zn,pf),s(L,lf),s(L,eo),s(eo,rf),s(L,cf),s(L,to),s(to,uf),s(L,mf),i(e,Bl,o),i(e,la,o),s(la,df),i(e,zl,o),i(e,Yt,o),Yt.innerHTML=Y2,i(e,Gl,o),i(e,U,o),s(U,ff),s(U,so),s(so,kf),s(U,hf),s(U,ao),s(ao,yf),s(U,wf),i(e,Vl,o),i(e,ra,o),s(ra,bf),i(e,$l,o),i(e,Bt,o),Bt.innerHTML=B2,i(e,Xl,o),i(e,Y,o),s(Y,vf),s(Y,no),s(no,Ef),s(Y,gf),s(Y,oo),s(oo,_f),s(Y,Pf),i(e,Kl,o),i(e,ia,o),s(ia,Tf),i(e,Ql,o),i(e,ca,o),s(ca,xf),i(e,Zl,o),i(e,ua,o),s(ua,Sf),i(e,er,o),i(e,ma,o),s(ma,jf),i(e,tr,o),i(e,da,o),s(da,Af),i(e,sr,o),i(e,fa,o),s(fa,If),i(e,ar,o),i(e,ka,o),s(ka,Df),i(e,nr,o),i(e,ha,o),s(ha,Cf),i(e,or,o),i(e,ya,o),s(ya,Lf),i(e,pr,o),i(e,wa,o),s(wa,Mf),i(e,lr,o),i(e,f,o),s(f,Rf),s(f,po),s(po,Of),s(f,Hf),s(f,lo),s(lo,Wf),s(f,Jf),s(f,ro),s(ro,Ff),s(f,qf),s(f,io),s(io,Nf),s(f,Uf),s(f,co),s(co,Yf),s(f,Bf),i(e,rr,o),i(e,zt,o),s(zt,uo),s(uo,zf),s(zt,Gf),i(e,ir,o),i(e,je,o),s(je,Vf),s(je,Gt),s(Gt,$f),s(je,Xf),i(e,cr,o),i(e,ba,o),s(ba,Kf),i(e,ur,o),i(e,B,o),s(B,Qf),s(B,mo),s(mo,Zf),s(B,ek),s(B,fo),s(fo,tk),s(B,sk),i(e,mr,o),i(e,va,o),s(va,ak),i(e,dr,o),i(e,Ae,o),s(Ae,nk),s(Ae,ko),s(ko,ok),s(Ae,pk),i(e,fr,o),i(e,Vt,o),Vt.innerHTML=z2,i(e,kr,o),i(e,z,o),s(z,lk),s(z,ho),s(ho,rk),s(z,ik),s(z,yo),s(yo,ck),s(z,uk),i(e,hr,o),i(e,h,o),s(h,mk),s(h,wo),s(wo,dk),s(h,fk),s(h,bo),s(bo,kk),s(h,hk),s(h,vo),s(vo,yk),s(h,wk),s(h,Eo),s(Eo,bk),s(h,vk),i(e,yr,o),i(e,Ea,o),s(Ea,Ek),i(e,wr,o),i(e,ga,o),s(ga,gk),i(e,br,o),i(e,Ie,o),s(Ie,_k),s(Ie,$t),s($t,Pk),s(Ie,Tk),i(e,vr,o),i(e,_a,o),s(_a,xk),i(e,Er,o),i(e,Xt,o),Xt.innerHTML=G2,i(e,gr,o),i(e,Pa,o),s(Pa,Sk),i(e,_r,o),i(e,Kt,o),Kt.innerHTML=V2,i(e,Pr,o),i(e,G,o),s(G,jk),s(G,go),s(go,Ak),s(G,Ik),s(G,_o),s(_o,Dk),s(G,Ck),i(e,Tr,o),i(e,y,o),s(y,Lk),s(y,Po),s(Po,Mk),s(y,Rk),s(y,To),s(To,Ok),s(y,Hk),s(y,xo),s(xo,Wk),s(y,Jk),s(y,So),s(So,Fk),s(y,qk),i(e,xr,o),i(e,x,o),s(x,Nk),s(x,Qt),s(Qt,Uk),s(x,Yk),s(x,Zt),s(Zt,Bk),s(x,zk),s(x,es),s(es,Gk),s(x,Vk),i(e,Sr,o),i(e,ts,o),ts.innerHTML=$2,i(e,jr,o),i(e,Ta,o),s(Ta,$k),i(e,Ar,o),i(e,xa,o),s(xa,Xk),i(e,Ir,o),i(e,S,o),s(S,Kk),s(S,jo),s(jo,Qk),s(S,Zk),s(S,ss),s(ss,eh),s(S,th),s(S,as),s(as,sh),s(S,ah),i(e,Dr,o),i(e,j,o),s(j,nh),s(j,ns),s(ns,oh),s(j,ph),s(j,Ao),s(Ao,lh),s(j,rh),s(j,Io),s(Io,ih),s(j,ch),i(e,Cr,o),i(e,De,o),s(De,os),s(os,uh),s(os,Do),s(Do,mh),s(os,dh),s(De,fh),s(De,ee),s(ee,kh),s(ee,ps),s(ps,hh),s(ee,yh),s(ee,ls),s(ls,wh),s(ee,bh),i(e,Lr,o),i(e,Sa,o),s(Sa,vh),i(e,Mr,o),i(e,Ce,o),s(Ce,rs),s(rs,Eh),s(rs,Co),s(Co,gh),s(rs,_h),s(Ce,Ph),s(Ce,Lo),s(Lo,Th),i(e,Rr,o),i(e,is,o),is.innerHTML=X2,i(e,Or,o),i(e,A,o),s(A,M),s(M,xh),s(M,Mo),s(Mo,Sh),s(M,jh),s(M,Ro),s(Ro,Ah),s(M,Ih),s(M,Oo),s(Oo,Dh),s(M,Ch),s(A,Lh),s(A,cs),s(cs,Mh),s(cs,Ho),s(Ho,Rh),s(cs,Oh),s(A,Hh),s(A,us),s(us,Wh),s(us,Wo),s(Wo,Jh),s(us,Fh),s(A,qh),s(A,Jo),s(Jo,Nh),i(e,Hr,o),i(e,Le,o),s(Le,Uh),s(Le,ms),s(ms,Yh),s(Le,Bh),i(e,Wr,o),i(e,I,o),s(I,ja),s(ja,zh),s(ja,Fo),s(Fo,Gh),s(I,Vh),s(I,ds),s(ds,qo),s(qo,$h),s(ds,Xh),s(ds,No),s(No,Kh),s(I,Qh),s(I,te),s(te,Zh),s(te,Uo),s(Uo,ey),s(te,ty),s(te,Yo),s(Yo,sy),s(te,ay),s(I,ny),s(I,Bo),s(Bo,oy),i(e,Jr,o),i(e,Me,o),s(Me,py),s(Me,fs),s(fs,ly),s(Me,ry),i(e,Fr,o),i(e,ks,o),ks.innerHTML=K2,i(e,qr,o),i(e,Aa,o),s(Aa,iy),i(e,Nr,o),i(e,Ia,o),s(Ia,cy),i(e,Ur,o),i(e,Re,o),s(Re,uy),s(Re,hs),s(hs,my),s(Re,dy),i(e,Yr,o),i(e,D,o),s(D,fy),s(D,zo),s(zo,ky),s(D,hy),s(D,Go),s(Go,yy),s(D,wy),s(D,Vo),s(Vo,by),s(D,vy),i(e,Br,o),i(e,Oe,o),s(Oe,Ey),s(Oe,ys),s(ys,gy),s(Oe,_y)},p:Iy,i:Iy,o:Iy,d(e){e&&t(b),e&&t($o),e&&t(v),e&&t(Xo),e&&t(se),e&&t(Ko),e&&t(vs),e&&t(Qo),e&&t(Es),e&&t(Zo),e&&t(ae),e&&t(ep),e&&t(k),e&&t(tp),e&&t(E),e&&t(sp),e&&t(g),e&&t(ap),e&&t(ne),e&&t(np),e&&t(gs),e&&t(op),e&&t(oe),e&&t(pp),e&&t(_s),e&&t(lp),e&&t(ut),e&&t(rp),e&&t(Ps),e&&t(ip),e&&t(mt),e&&t(cp),e&&t(Ts),e&&t(up),e&&t(dt),e&&t(mp),e&&t(xs),e&&t(dp),e&&t(Ss),e&&t(fp),e&&t(ft),e&&t(kp),e&&t(js),e&&t(hp),e&&t(kt),e&&t(yp),e&&t(pe),e&&t(wp),e&&t(As),e&&t(bp),e&&t(Is),e&&t(vp),e&&t(le),e&&t(Ep),e&&t(re),e&&t(gp),e&&t(yt),e&&t(_p),e&&t(ie),e&&t(Pp),e&&t(wt),e&&t(Tp),e&&t(ce),e&&t(xp),e&&t(bt),e&&t(Sp),e&&t(Ds),e&&t(jp),e&&t(Cs),e&&t(Ap),e&&t(_),e&&t(Ip),e&&t(ue),e&&t(Dp),e&&t(Ls),e&&t(Cp),e&&t(d),e&&t(Lp),e&&t(R),e&&t(Mp),e&&t(Ms),e&&t(Rp),e&&t(Rs),e&&t(Op),e&&t(vt),e&&t(Hp),e&&t(me),e&&t(Wp),e&&t(de),e&&t(Jp),e&&t(fe),e&&t(Fp),e&&t(Ws),e&&t(qp),e&&t(Et),e&&t(Np),e&&t(Js),e&&t(Up),e&&t(gt),e&&t(Yp),e&&t(ke),e&&t(Bp),e&&t(Fs),e&&t(zp),e&&t(qs),e&&t(Gp),e&&t(he),e&&t(Vp),e&&t(Ns),e&&t($p),e&&t(_t),e&&t(Xp),e&&t(Pt),e&&t(Kp),e&&t(Us),e&&t(Qp),e&&t(O),e&&t(Zp),e&&t(Ys),e&&t(el),e&&t(P),e&&t(tl),e&&t(ye),e&&t(sl),e&&t(Tt),e&&t(al),e&&t(Bs),e&&t(nl),e&&t(xt),e&&t(ol),e&&t(zs),e&&t(pl),e&&t(Gs),e&&t(ll),e&&t(we),e&&t(rl),e&&t(Vs),e&&t(il),e&&t(St),e&&t(cl),e&&t(be),e&&t(ul),e&&t(jt),e&&t(ml),e&&t(ve),e&&t(dl),e&&t(It),e&&t(fl),e&&t(T),e&&t(kl),e&&t($s),e&&t(hl),e&&t(Dt),e&&t(yl),e&&t(Xs),e&&t(wl),e&&t(H),e&&t(bl),e&&t(Ks),e&&t(vl),e&&t(Mt),e&&t(El),e&&t(Qs),e&&t(gl),e&&t(Rt),e&&t(_l),e&&t(Ee),e&&t(Pl),e&&t(Zs),e&&t(Tl),e&&t(W),e&&t(xl),e&&t(Ht),e&&t(Sl),e&&t(ge),e&&t(jl),e&&t(Jt),e&&t(Al),e&&t(ea),e&&t(Il),e&&t(Ft),e&&t(Dl),e&&t(ta),e&&t(Cl),e&&t(qt),e&&t(Ll),e&&t(J),e&&t(Ml),e&&t(sa),e&&t(Rl),e&&t(aa),e&&t(Ol),e&&t(_e),e&&t(Hl),e&&t(Pe),e&&t(Wl),e&&t(F),e&&t(Jl),e&&t(Te),e&&t(Fl),e&&t(oa),e&&t(ql),e&&t(xe),e&&t(Nl),e&&t(q),e&&t(Ul),e&&t(pa),e&&t(Yl),e&&t(Se),e&&t(Bl),e&&t(la),e&&t(zl),e&&t(Yt),e&&t(Gl),e&&t(U),e&&t(Vl),e&&t(ra),e&&t($l),e&&t(Bt),e&&t(Xl),e&&t(Y),e&&t(Kl),e&&t(ia),e&&t(Ql),e&&t(ca),e&&t(Zl),e&&t(ua),e&&t(er),e&&t(ma),e&&t(tr),e&&t(da),e&&t(sr),e&&t(fa),e&&t(ar),e&&t(ka),e&&t(nr),e&&t(ha),e&&t(or),e&&t(ya),e&&t(pr),e&&t(wa),e&&t(lr),e&&t(f),e&&t(rr),e&&t(zt),e&&t(ir),e&&t(je),e&&t(cr),e&&t(ba),e&&t(ur),e&&t(B),e&&t(mr),e&&t(va),e&&t(dr),e&&t(Ae),e&&t(fr),e&&t(Vt),e&&t(kr),e&&t(z),e&&t(hr),e&&t(h),e&&t(yr),e&&t(Ea),e&&t(wr),e&&t(ga),e&&t(br),e&&t(Ie),e&&t(vr),e&&t(_a),e&&t(Er),e&&t(Xt),e&&t(gr),e&&t(Pa),e&&t(_r),e&&t(Kt),e&&t(Pr),e&&t(G),e&&t(Tr),e&&t(y),e&&t(xr),e&&t(x),e&&t(Sr),e&&t(ts),e&&t(jr),e&&t(Ta),e&&t(Ar),e&&t(xa),e&&t(Ir),e&&t(S),e&&t(Dr),e&&t(j),e&&t(Cr),e&&t(De),e&&t(Lr),e&&t(Sa),e&&t(Mr),e&&t(Ce),e&&t(Rr),e&&t(is),e&&t(Or),e&&t(A),e&&t(Hr),e&&t(Le),e&&t(Wr),e&&t(I),e&&t(Jr),e&&t(Me),e&&t(Fr),e&&t(ks),e&&t(qr),e&&t(Aa),e&&t(Nr),e&&t(Ia),e&&t(Ur),e&&t(Re),e&&t(Yr),e&&t(D),e&&t(Br),e&&t(Oe)}}}const RE={title:"Polymer 2 and TypeScript",cover:"https://picsum.photos/800/600?image=0",date:"09-12-2017",category:"webdevelopment",tags:["webdevelopment"],preview:`For reasons beyond my control I’m working with
Polymer 2 at the moment. Although the idea of web components is great, the choice for HTML imports that comes with
Polymer 2 makes integration into a modern development stack cumbersome, as will become...`,previewHtml:'<p>For <a href="../polymer2-redux/">reasons beyond my control</a> I’m working with Polymer 2 at the moment. Although the idea of web components is great, the choice for HTML imports that comes with Polymer 2 makes integration into a modern development stack cumbersome, as will become c...</p>'};class OE extends IE{constructor(b){super(),DE(this,b,null,LE,CE,{})}}export{OE as default,RE as metadata};
